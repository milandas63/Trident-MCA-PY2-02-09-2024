Start Date: 02-09-2024
Time: Monday to Friday (3:30 pm-5:30 pm)
Course: PYTHON
Whatsapp group: 3rdSem MCA Trident(IIG Group)
GitHub-ID: https://github.com/milandas63/Trident-MCA-PY2-02-09-2024
Wifi Password: #A1B2C3E5D4#

Participants:
MILAN DAS                   7978168568  milandas63@gmail.com                milandas63
1.  Gopinath Ojha           7751847636  gopin5427@gmail.com                 Gopinathojha
2.  Abinash Patra           7848039329  patraabinash374@gmail.com           Abinash533
3.  Priyadarshini Mohapatra 8917460932  priyadarshinimohapatra328@gmail.com Priyadarshini-Mohapatra
4.  Harapriya Panda         6372322013  harapriya1813@gmail.com             Harapriya13181
5.  Ipsita Nayak            8144661279  ipsitanayak923@gmail.com            simpler-itgithub
6.  Bijay Kumar Behera      7205384824  bijaybehera594@gmail.com            BIJAY-BEHERA
7.  Srikant Behera          7978841760  kumarsrikant0788@gmail.com          srikant-07
8.  Dibyaranjan Sethi       9114168580  dibyaranjanip9@gmail.com            Dibya9114
9.  Jagan Lenka             9337849824  jaganlenka76@gmail.com

+--------------------+
| Monday, 02-09-2024 |  Day-01
+--------------------+
WHAT IS PYTHON?
Python is a widely-used, compiled and interpreted, garbage-collected,
high-level programming language and purely object-oriented programming
language that supports procedural, object-oriented, and functional
programming with dynamic semantics, used for general-purpose programming.
It’s everywhere, and people use numerous Python-powered devices on a daily
basis, whether they realize it or not.

----------------------------------------------------------------------------------

WHO DEVELOPED PYTHON?
The seed from which Python sprouted was created by Guido van Rossum,
and first released on February 20, 1991. While you may know the python
as a large snake, the name of the Python programming language comes
from an old BBC television comedy sketch series called Monty Python's
Flying Circus.

----------------------------------------------------------------------------------

FEATURES OF PYTHON:
1.  Easy to use and Read - Python's syntax is clear and easy to read,
    making it an ideal language for both beginners and experienced programmers.
    This simplicity can lead to faster development and reduce the chances of errors.
2.  Dynamically Typed - The data types of variables are determined during run-time.
    We do not need to specify the data type of a variable during writing codes.
3.  High-level - High-level language means human readable code.
4.  Compiled and Interpreted - Python code first gets compiled into bytecode,
    and then interpreted line by line. When we download the Python in our
    system form org we download the default implement of Python known as
    CPython. CPython is considered to be Complied and Interpreted both.
5.  Garbage Collected - Memory allocation and de-allocation are automatically
    managed. Programmers do not specifically need to manage the memory.
6.  Purely Object-Oriented - It refers to everything as an object, including
    numbers and strings.
7.  Cross-platform Compatibility - Python can be easily installed on Windows,
    macOS, and various Linux distributions, allowing developers to create
    software that runs across different operating systems.
8.  Rich Standard Library - Python comes with several standard libraries that
    provide ready-to-use modules and functions for various tasks, ranging
    from web development and data manipulation to machine learning and
    networking.
9.  Open Source - Python is an open-source, cost-free programming language.
    It is utilized in several sectors and disciplines as a result.

----------------------------------------------------------------------------------

HISTORY OF PYTHON
Python was created by Guido van Rossum. In the late 1980s, Guido van Rossum,
a Dutch programmer, began working on Python while at the Centrum Wiskunde &
Informatica (CWI) in the Netherlands. He wanted to create a successor to the
ABC programming language that would be easy to read and efficient.

In February 1991, the first public version of Python, version 0.9.0, was
released. This marked the official birth of Python as an open-source project.
The language was named after the British comedy series "Monty Python's
Flying Circus".

Python development has gone through several stages. In January 1994,
Python 1.0 was released as a usable and stable programming language.
This version included many of the features that are still present in
Python today.

From the 1990s to the 2000s, Python gained popularity for its simplicity,
readability, and versatility. In October 2000, Python 2.0 was released.
Python 2.0 introduced list comprehensions, garbage collection, and support
for Unicode.

In December 2008, Python 3.0 was released. Python 3.0 introduced several
backward-incompatible changes to improve code readability and maintainability.

Throughout 2010s, Python's popularity increased, particularly in fields like
data science, machine learning, and web development. Its rich ecosystem of
libraries and frameworks made it a favourite among developers.

The Python Software Foundation (PSF) was established in 2001 to promote,
protect, and advance the Python programming language and its community.

----------------------------------------------------------------------------------

WHY LEARN PYTHON?
Python provides many useful features to the programmer. These features make
it the most popular and widely used language. We have listed below
few-essential features of Python.

1.  Easy to use and Learn: Python has a simple and easy-to-understand syntax,
    unlike traditional languages like C, C++, Java, etc., making it easy for
    beginners to learn.
2.  Expressive Language: It allows programmers to express complex concepts in
    just a few lines of code or reduces Developer's Time.
3.  Interpreted Language: Python does not require compilation, allowing rapid
    development and testing. It uses Interpreter instead of Compiler.
4.  Object-Oriented Language: It supports object-oriented programming, making
    writing reusable and modular code easy.
5.  Open-Source Language: Python is open-source and free to use, distribute
    and modify.
6.  Extensible: Python can be extended with modules written in C, C++, or
    other languages.
7.  Learn Standard Library: Python's standard library contains many modules
    and functions that can be used for various tasks, such as string
    manipulation, web programming, and more.
8.  GUI Programming Support: Python provides several GUI frameworks, such as
    Tkinter and PyQt, allowing developers to create desktop applications easily.
9.  Integrated: Python can easily integrate with other languages and
    technologies, such as C/C++, Java, and . NET.
10. Embeddable: Python code can be embedded into other applications as a
    scripting language.
11. Dynamic Memory Allocation: Python automatically manages memory allocation,
    making it easier for developers to write complex programs without worrying
    about memory management.
12. Wide Range of Libraries and Frameworks: Python has a vast collection of
    libraries and frameworks, such as NumPy, Pandas, Django, and Flask, that
    can be used to solve a wide range of problems.
13. Versatility: Python is a universal language in various domains such as web
    development, machine learning, data analysis, scientific computing, and more.
14. Large Community: Python has a vast and active community of developers
    contributing to its development and offering support. This makes it easy
    for beginners to get help and learn from experienced developers.
15. Career Opportunities: Python is a highly popular language in the job market.
    Learning Python can open up several career opportunities in data science,
    artificial intelligence, web development, and more.
16. High Demand: With the growing demand for automation and digital
    transformation, the need for Python developers is rising. Many
    industries seek skilled Python developers to help build their digital
    infrastructure.
17. Increased Productivity: Python has a simple syntax and powerful libraries
    that can help developers write code faster and more efficiently. This can
    increase productivity and save time for developers and organizations.
18. Big Data and Machine Learning: Python has become the go-to language for
    big data and machine learning. Python has become popular among data
    scientists and machine learning engineers with libraries like NumPy,
    Pandas, Scikit-learn, TensorFlow, and more.

----------------------------------------------------------------------------------

PYTHON KEYWORDS
Python has a set of keywords that are reserved words that cannot be
used as variable names, function names, or any other identifiers:

KEYWORD     DESCRIPTION
 1. and         A logical operator
 2. as          To create an alias
 3. assert      For debugging
 4. break       To break out of a loop
 5. class       To define a class
 6. continue    To continue to the next iteration of a loop
 7. def         To define a function
 8. del         To delete an object
 9. elif        Used in conditional statements, same as else if
10. else        Used in conditional statements
11. except      Used with exceptions, what to do when an exception occurs
12. False       Boolean value, result of comparison operations
13. finally     Used with exceptions, a block of code that will be executed no matter if there is an exception or not
14. for         To create a for loop
15. from        To import specific parts of a module
16. global      To declare a global variable
17. if          To make a conditional statement
18. import      To import a module
19. in          To check if a value is present in a list, tuple, etc.
20. is          To test if two variables are equal
21. lambda      To create an anonymous function
22. None        Represents a null value
23. nonlocal    To declare a non-local variable
24. not         A logical operator
25. or          A logical operator
26. pass        A null statement, a statement that will do nothing
27. raise       To raise an exception
28. return      To exit a function and return a value
29. True        Boolean value, result of comparison operations
30. try         To make a try...except statement
31. while       To create a while loop
32. with        Used to simplify exception handling
33. yield       To return a list of values from a generator

----------------------------------------------------------------------------------

PYTHON GLOSSARY
This is a list of all the features explained in the Python Tutorial.

Indentation
    Indentation refers to the spaces at the beginning of a code line
Comments
    Comments are code lines that will not be executed
Multiline Comments
    How to insert comments on multiple lines
Creating Variables
    Variables are containers for storing data values
Variable Names
    How to name your variables
Assign Values to Multiple Variables
    How to assign values to multiple variables
Output Variables
    Use the print statement to output variables
String Concatenation
    How to combine strings
Global Variables
    Global variables are variables that belongs to the global scope
Built-In Data Types
    Python has a set of built-in data types
Getting Data Type
    How to get the data type of an object
Setting Data Type
    How to set the data type of an object
Numbers
    There are three numeric types in Python
Int
    The integer number type
Float
    The floating number type
Complex
    The complex number type
Type Conversion
    How to convert from one number type to another
Random Number
    How to create a random number
Specify a Variable
    Type    How to specify a certain data type for a variable
String Literals
    How to create string literals
Assigning a String to a Variable
    How to assign a string value to a variable
Multiline Strings
    How to create a multiline string
Strings are Arrays
    Strings in Python are arrays of bytes representing Unicode characters
Slicing a String
    How to slice a string
Negative Indexing on a String
    How to use negative indexing when accessing a string
String Length
    How to get the length of a string
Check In String
    How to check if a string contains a specified phrase
Format String
    How to combine two strings
Escape Characters
    How to use escape characters
Boolean Values
    True or False
Evaluate Booleans
    Evaluate a value or statement and return either True or False
Return Boolean Value
    Functions that return a Boolean value
Operators
    Use operator to perform operations in Python
Arithmetic Operators
    Arithmetic operator are used to perform common mathematical operations
Assignment Operators
    Assignment operators are use to assign values to variables
Comparison Operators
    Comparison operators are used to compare two values
Logical Operators
    Logical operators are used to combine conditional statements
Identity Operators
    Identity operators are used to see if two objects are in fact the same object
Membership Operators
    Membership operators are used to test is a sequence is present in an object
Bitwise Operators
    Bitwise operators are used to compare (binary) numbers
Lists
    A list is an ordered, and changeable, collection
Access List Items
    How to access items in a list
Change List Item
    How to change the value of a list item
Loop Through List Items
    How to loop through the items in a list
List Comprehension
    How use a list comprehensive
Check if List Item Exists
    How to check if a specified item is present in a list
List Length
    How to determine the length of a list
Add List Items
    How to add items to a list
Remove List Items
    How to remove list items
Copy a List
    How to copy a list
Join Two Lists
    How to join two lists
Tuple
    A tuple is an ordered, and unchangeable, collection
Access Tuple Items
    How to access items in a tuple
Change Tuple Item
    How to change the value of a tuple item
Loop List Items
    How to loop through the items in a tuple
Check if Tuple Item Exists
    How to check if a specified item is present in a tuple
Tuple Length
    How to determine the length of a tuple
Tuple With One Item
    How to create a tuple with only one item
Remove Tuple Items
    How to remove tuple items
Join Two Tuples
    How to join two tuples
Set
    A set is an unordered, and unchangeable, collection
Access Set Items
    How to access items in a set
Add Set Items
    How to add items to a set
Loop Set Items
    How to loop through the items in a set
Check if Set Item Exists
    How to check if a item exists
Set Length
    How to determine the length of a set
Remove Set Items
    How to remove set items
Join Two Sets
    How to join two sets
Dictionary
    A dictionary is an unordered, and changeable, collection
Access Dictionary Items
    How to access items in a dictionary
Change Dictionary Item
    How to change the value of a dictionary item
Loop Dictionary Items
    How to loop through the items in a tuple
Check if Dictionary Item Exists
    How to check if a specified item is present in a dictionary
Dictionary Length
    How to determine the length of a dictionary
Add Dictionary Item
    How to add an item to a dictionary
Remove Dictionary Items
    How to remove dictionary items
Copy
    Dictionary  How to copy a dictionary
Nested Dictionaries
    A dictionary within a dictionary
If Statement
    How to write an if statement
If Indentation
    If statements in Python relies on indentation (whitespace at the
    beginning of a line)
Elif
    elif is the same as "else if" in other programming languages
Else
    How to write an if...else statement
Shorthand If
    How to write an if statement in one line
Shorthand If Else
    How to write an if...else statement in one line
If AND
    Use the and keyword to combine if statements
If OR
    Use the or keyword to combine if statements
If NOT
    Use the not keyword to reverse the condition
Nested If
    How to write an if statement inside an if statement
The pass Keyword in If
    Use the pass keyword inside empty if statements
While
    How to write a while loop
While Break
    How to break a while loop
While Continue
    How to stop the current iteration and continue wit the next
While Else
    How to use an else statement in a while loop
For
    How to write a for loop
Loop Through a String
    How to loop through a string
For Break
    How to break a for loop
For Continue
    How to stop the current iteration and continue wit the next
Looping Through a range
    How to loop through a range of values
For Else
    How to use an else statement in a for loop
Nested Loops
    How to write a loop inside a loop
For pass
    Use the pass keyword inside empty for loops
Function
    How to create a function in Python
Call a Function
    How to call a function in Python
Function Arguments
    How to use arguments in a function
*args
    To deal with an unknown number of arguments in a function, use the
    * symbol before the parameter name
Keyword Arguments
    How to use keyword arguments in a function
**kwargs
    To deal with an unknown number of keyword arguments in a function,
    use the * symbol before the parameter name
Default Parameter Value
    How to use a default parameter value
Passing a List as an Argument
    How to pass a list as an argument
Function Return Value
    How to return a value from a function
The pass Statement in Functions
    Use the pass statement in empty functions
Function Recursion
    Functions that can call itself is called recursive functions
Lambda Function
    How to create anonymous functions in Python
Why Use Lambda Functions
    Learn when to use a lambda function or not
Array
    Lists can be used as Arrays
What is an Array
    Arrays are variables that can hold more than one value
Access Arrays
    How to access array items
Array Length
    How to get the length of an array
Looping Array Elements
    How to loop through array elements
Add Array Element
    How to add elements from an array
Remove Array Element
    How to remove elements from an array
Array Methods
    Python has a set of Array/Lists methods
Class
    A class is like an object constructor
Create Class
    How to create a class
The Class __init__() Function
    The __init__() function is executed when the class is initiated
Object Methods
    Methods in objects are functions that belongs to the object
self
    The self parameter refers to the current instance of the class
Modify Object Properties
    How to modify properties of an object
Delete Object Properties
    How to modify properties of an object
Delete Object
    How to delete an object
Class pass Statement
    Use the pass statement in empty classes
Create Parent Class
    How to create a parent class
Create Child Class
    How to create a child class
Create the __init__() Function
    How to create the __init__() function
super Function
    The super() function make the child class inherit the parent class
Add Class Properties
    How to add a property to a class
Add Class Methods
    How to add a method to a class
Iterators
    An iterator is an object that contains a countable number of values
Iterator vs Iterable
    What is the difference between an iterator and an iterable
Loop Through an Iterator
    How to loop through the elements of an iterator
Create an Iterator
    How to create an iterator
StopIteration
    How to stop an iterator
Global Scope
    When does a variable belong to the global scope?
Global Keyword
    The global keyword makes the variable global
Create a Module
    How to create a module
Variables in Modules
    How to use variables in a module
Renaming a Module
    How to rename a module
Built-in Modules
    How to import built-in modules
Using the dir() Function
    List all variable names and function names in a module
Import From Module
    How to import only parts from a module
Datetime Module
    How to work with dates in Python
Date Output
    How to output a date
Create a Date Object
    How to create a date object
The strftime Method
    How to format a date object into a readable string
Date Format Codes
    The datetime module has a set of legal format codes
JSON
    How to work with JSON in Python
Parse JSON
    How to parse JSON code in Python
Convert into JSON
    How to convert a Python object in to JSON
Format JSON
    How to format JSON output with indentations and line breaks
Sort JSON
    How to sort JSON
RegEx Module
    How to import the regex module
RegEx Functions
    The re module has a set of functions
Metacharacters in RegEx
    Metacharacters are characters with a special meaning
RegEx Special Sequences
    A backslash followed by a a character has a special meaning
RegEx Sets
    A set is a set of characters inside a pair of square brackets with a special meaning
RegEx Match Object
    The Match Object is an object containing information about the search and the result
Install PIP
    How to install PIP
PIP Packages
    How to download and install a package with PIP
PIP Remove Package
    How to remove a package with PIP
Error Handling
    How to handle errors in Python
Handle Many Exceptions
    How to handle more than one exception
Try Else
    How to use the else keyword in a try statement
Try Finally
    How to use the finally keyword in a try statement
raise
    How to raise an exception in Python

----------------------------------------------------------------------------------

PYTHON BUILT-IN EXCEPTIONS
The table below shows built-in exceptions that are usually raised in Python:

EXCEPTION           DESCRIPTION
ArithmeticError     Raised when an error occurs in numeric calculations
AssertionError      Raised when an assert statement fails
AttributeError      Raised when attribute reference or assignment fails
Exception           Base class for all exceptions
EOFError            Raised when the input() method hits an "end of file" condition (EOF)
FloatingPointError  Raised when a floating point calculation fails
GeneratorExit       Raised when a generator is closed (with the close() method)
ImportError         Raised when an imported module does not exist
IndentationError    Raised when indentation is not correct
IndexError          Raised when an index of a sequence does not exist
KeyError            Raised when a key does not exist in a dictionary
KeyboardInterrupt   Raised when the user presses Ctrl+c, Ctrl+z or Delete
LookupError         Raised when errors raised cant be found
MemoryError         Raised when a program runs out of memory
NameError           Raised when a variable does not exist
NotImplementedError Raised when an abstract method requires an inherited class to override the method
OSError             Raised when a system related operation causes an error
OverflowError       Raised when the result of a numeric calculation is too large
ReferenceError      Raised when a weak reference object does not exist
RuntimeError        Raised when an error occurs that do not belong to any specific exceptions
StopIteration       Raised when the next() method of an iterator has no further values
SyntaxError         Raised when a syntax error occurs
TabError            Raised when indentation consists of tabs or spaces
SystemError         Raised when a system error occurs
SystemExit          Raised when the sys.exit() function is called
TypeError           Raised when two different types are combined
UnboundLocalError   Raised when a local variable is referenced before assignment
UnicodeError        Raised when a unicode problem occurs
UnicodeEncodeError  Raised when a unicode encoding problem occurs
UnicodeDecodeError  Raised when a unicode decoding problem occurs
UnicodeTranslateError   Raised when a unicode translation problem occurs
ValueError          Raised when there is a wrong value in a specified data type
ZeroDivisionError   Raised when the second operator in a division is zero

----------------------------------------------------------------------------------

+---------------------+
| Tuesday, 03-09-2024 |  Day-02
+---------------------+
    =   Comments
        The lines which are ignored by the compiler
        There are 2 types of comments in Python:
        1. # - for single line comment
        2. """
                multiline comment
           """
    =   Addition
    =   Subtraction
    =   Multiplication
    =   Division

    =   Variables
        Rules for creating a variable name:
        1. The variable name must start with alphabetic character or underscore character (_)
        2. A reserve word can't be a variable name
        3. Variable names are created with the help of alphabetic, digit and underscore characters

    =   Mulitiple values List
        >   Uses [] to create List
        >   Automatically resize
        >   Multiple data-types are allowed
    =   Dictionary
        >   Uses {} to create Set
        >   Created with a name:value pair
    =   Set
        >   Uses {} to create Set
        >   Doesn't allow repetition
        >   Order value automatically
    =   if-[elif]-[elif]-[else]
    =   True, False
    =   for
    =   while
    =   try...except
        What is an exception?
        An exception is a fault resistance technique implemented in programming.


D:\IIG\Intern-PY2-2024-09-02>py diamond.py
                                        *
                                       ***
                                      *****
                                     *******
                                    *********
                                   ***********
                                  *************
                                 ***************
                                *****************
                               *******************
                                *****************
                                 ***************
                                  *************
                                   ***********
                                    *********
                                     *******
                                      *****
                                       ***
                                        *

D:\IIG\Intern-PY2-2024-09-02>python
Python 3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>>
>>>
>>> # Ignore this line
>>> """
... Multiple lines may be
... written within the 3 double quotes
... and the lines will be ignored
... """
'\nMultiple lines may be\nwritten within the 3 double quotes\nand the lines will be ignored\n'
>>>
>>>
>>> 35+25
60
>>> 35 - 25
10
>>> 5 * 25
125
>>> 300 / 50
6.0
>>> 24progranas = 100
  File "<stdin>", line 1
    24progranas = 100
     ^
SyntaxError: invalid decimal literal
>>> _var = 100
>>> x = 150
>>> from = 25
  File "<stdin>", line 1
    from = 25
         ^
SyntaxError: invalid syntax
>>>
>>>
>>>
>>>
>>> lang = ["English","Odia","Hindi","Panjabi"]
>>> lang
['English', 'Odia', 'Hindi', 'Panjabi']
>>> lang[3]
'Panjabi'
>>> lang[1]
'Odia'
>>> lang[0]
'English'
>>> lang + [1234,4321,3421,2234,2231]
['English', 'Odia', 'Hindi', 'Panjabi', 1234, 4321, 3421, 2234, 2231]
>>>
>>>
>>> dic = { "president":"droupadi murmu", "pm":"narendra modi", "fm":"nirmal sitaraman" }
>>> dic["pm"]
'narendra modi'
>>> dic["fm"]
'nirmal sitaraman'
>>> dic["president"]
'droupadi murmu'
>>> dic["presi"]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'presi'
>>>
>>>
>>>
>>> dic = { "president":"droupadi murmu", "pm":"narendra modi", "fm":"nirmal sitaraman", 444:"Trident"
, True:"Jagan Sen" }
>>> dic[444]
'Trident'
>>> dic["444"]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: '444'
>>> dic[True]
'Jagan Sen'
>>> dic["droupadi murmu"]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'droupadi murmu'
>>>
>>>
>>>
>>>
>>> stype = {11, 11, 11, 44,44,44,44,44,77,77,77,22,22,22,2,22,22,22,5,55,55,55,55,55,33}
>>> stype
{33, 2, 5, 11, 44, 77, 22, 55}
>>> stype
{33, 2, 5, 11, 44, 77, 22, 55}
>>>
>>>
>>>
>>>
>>> if 1==2:
...     print("Never")
... else:
...     print("Equals")
...
Equals
>>> x = 10
>>> if x==1:
...     print("One")
... elif x==5:
...     print("Five")
... elif x==10:
...     print("Ten")
...
Ten
>>> True or False
True
>>> True and False
False
>>>
>>>
>>>
>>> for item in lang:
...     print(item)
...
English
Odia
Hindi
Panjabi
>>>
>>>
>>> for i in range(0,10):
...     print(i)
...
0
1
2
3
4
5
6
7
8
9
>>> for i in range(0, 101, 5):
...     print(i, end=" ")
...
0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 >>>
>>>
>>>
>>> for i in range(100, -1, -5):
...     print(i, end-", ")
...
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'end' is not defined
>>> for i in range(100, -1, -5):
...     print(i, end=", ")
...
100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0,
>>>
>>>
>>> x = 0
>>> try:
...     while x <= 4:
...         print(lang[x])
...         x = x - 1
... except IndexError:
...     print("No more data in list")
...
English
Panjabi
Hindi
Odia
English
No more data in list

    =   CLASSWORK:
        Write a program to print the following figure:
                          1
                         121
                        12321
                       1234321
                      123454321
                     12345654321
                    1234567654321
                   123456787654321
                  12345678987654321

    =   ASSIGNMENT-1:
        Write a program to print the following figure:
                         *
                        * *
                       *   *
                      *     *
                     *       *
                    *         *
                   *           *
                  *             *
                 *               *
                *******************

    =   ASSIGNMENT-2:
        Write a program to print the following figure:
                         1
                        212
                       32123
                      4321234
                     543212345
                    65432123456
                   7654321234567
                  876543212345678
                 98765432123456789


+-----------------------+
| Wednesday, 04-09-2024 |  Day-03
+-----------------------+

    =   What is Tuple?
        >   Tuples are used to store multiple items in a single variable.
        >   Tuple is one of 4 built-in data types in Python used to store collections
            of data, the other 3 are List, Set, and Dictionary, all with different
            qualities and usage.
        >   A tuple is a collection which is ordered and unchangeable.

    =   def

    =   Built-in Data Types
        Variables can store data of different types, and different types can do
        different things.

        Python has the following data types built-in by default, in these categories:

        Text Type:          str
        Numeric Types:      int, float, complex
        Sequence Types:     list, tuple, range
        Mapping Type:       dict
        Set Types:          set, frozenset
        Boolean Type:       bool
        Binary Types:       bytes, bytearray, memoryview
        None Type:          NoneType


    =   SETTING THE DATA TYPE
        Example                                         Data Type
        x = "Hello World"                               str
        x = 20                                          int
        x = 20.5                                        float
        x = 1j                                          complex
        x = ["apple", "banana", "cherry"]               list
        x = ("apple", "banana", "cherry")               tuple
        x = range(6)                                    range
        x = {"name" : "John", "age" : 36}               dict
        x = {"apple", "banana", "cherry"}               set
        x = frozenset({"apple", "banana", "cherry"})    frozenset
        x = True                                        bool
        x = b"Hello"                                    bytes
        x = bytearray(5)                                bytearray
        x = memoryview(bytes(5))                        memoryview
        x = None                                        NoneType


    =   SETTING THE SPECIFIC DATA TYPE
        Example                                         Data Type
        x = str("Hello World")                          str
        x = int(20)                                     int
        x = float(20.5)                                 float
        x = complex(1j)                                 complex
        x = list(("apple", "banana", "cherry"))         list
        x = tuple(("apple", "banana", "cherry"))        tuple
        x = range(6)                                    range
        x = dict(name="John", age=36)                   dict
        x = set(("apple", "banana", "cherry"))          set
        x = frozenset(("apple", "banana", "cherry"))    frozenset
        x = bool(5)                                     bool
        x = bytes(5)                                    bytes
        x = bytearray(5)                                bytearray
        x = memoryview(bytes(5))                        memoryview

    =   ASSIGNMENT:
        Solve 1 question every day from Question.txt


+--------------------+
| Friday, 05-09-2024 |  Day-04
+--------------------+
    =   What is a string in Python?
        string is a sequence of characters. For example, "hello" is a string
        containing a sequence of characters 'h', 'e', 'l', 'l', and 'o'.

        We use single quotes or double quotes to represent a string in Python. For example,
        # create a string using double quotes
        string1 = "Python programming"

        # create a string using single quotes
        string1 = 'Python programming'

    =   Access String Characters in Python
        We can access the characters in a string in three ways.
        >   Indexing: One way is to treat strings as a list and use index values.
            For example,
                greet = 'hello'
                # access 1st index element
                print(greet[1]) # "e"

        >   Negative Indexing: Similar to a list, Python allows negative indexing for
            its strings. For example,
                greet = 'hello'
                # access 4th last element
                print(greet[-4]) # "e"

        >   Slicing: Access a range of characters in a string by using the slicing
            operator colon :. For example,
                greet = 'Hello'
                # access character from 1st index to 3rd index
                print(greet[1:4])  # "ell"

    =   Python Strings are Immutable
        >   In Python, strings are immutable. That means the characters of a string
            cannot be changed. For example,
                message = 'Happy Holiday'
                message[0] = 'H'
            TypeError: 'str' object does not support item assignment

    =   Python Multiline String
        >   We can also create a multiline string in Python. For this, we use triple
            double quotes """ or triple single quotes '''.
            For example,
                message = """
                This is line one
                This is line two
                This is line three
                """

    =   Python String Operations
        Many operations can be performed with strings, which makes it one of the most
        used data types in Python.
        1.  Compare Two Strings
            We use the == operator to compare two strings. If two strings are equal,
            the operator returns True. Otherwise, it returns False.
            For example,
                str1 = "Hello, world!"
                str2 = "I love Swift."
                str3 = "Hello, world!"

                # compare str1 and str2
                print(str1 == str2)

                # compare str1 and str3
                print(str1 == str3)

        2.  Join Two or More Strings
            In Python, we can join (concatenate) two or more strings using the + operator.
                greet = "Hello, "
                name = "Milan"

                # using + operator
                result = greet + name
                print(result)

                # Output: Hello, Milan

    =   Iterate Through a Python String
        We can iterate through a string using a for loop.
        For example,
            greet = 'Hello'
            # iterating through greet string
            for letter in greet:
                print(letter)

    =   Python String Length
        In Python, we use the len() method to find the length of a string.
        For example,
            greet = 'Hello'
            # count length of greet string
            print(len(greet))
            # Output: 5

    =   String Membership Test
        We can test if a substring exists within a string or not, using the keyword in.
            print('a' in 'program') # True
            print('at' not in 'battle') # False

    =   Methods of Python String
        Besides those mentioned above, there are various string methods present in
        Python. Here are some of those methods:

        METHODS         DESCRIPTION
        upper()         Converts the string to uppercase
        lower()         Converts the string to lowercase
        partition()     Returns a tuple partitioning the string from by the first occurance
        replace()       Replaces substring inside
        find()          Returns the index of the first occurrence of substring
        rstrip()        Removes trailing characters
        split()         Splits string from left and returns a list
        startswith()    Checks if string starts with the specified string
        isnumeric()     Checks numeric characters
        index()         Returns index of substring

    =   Escape Sequences in Python
        The escape sequence is used to escape some of the characters present inside a string.
        Suppose we need to include both a double quote and a single quote inside a string,
            example = "He said, "What's there?""
            print(example) # throws error

        To solve this issue, we use the escape character \ in Python.

            # escape double quotes
            example = "He said, \"What's there?\""

            # escape single quotes
            example = 'He said, "What\'s there?"'

            print(example)

            # Output: He said, "What's there?"

        The list of all the escape sequences supported by Python.

        ESCAPE SEQUENCE         DESCRIPTION
        \\                      Backslash
        \'                      Single quote
        \"                      Double quote
        \a                      ASCII Bell
        \b                      ASCII Backspace
        \f                      ASCII Formfeed
        \n                      ASCII Linefeed
        \r                      ASCII Carriage Return
        \t                      ASCII Horizontal Tab
        \v                      ASCII Vertical Tab
        \ooo                    Character with octal value ooo
        \xHH                    Character with hexadecimal value HH

    =   Python String Formatting (f-Strings)
        Python f-Strings makes it easy to print values and variables.

        For example,
            name = 'Gopinath'
            country = 'India'

            print(f'{name} is from {country}')

        Output
            Gopinath is from India

        Here, f'{name} is from {country}' is an f-string.
        This new formatting syntax is powerful and easy to use. From now on, we will
        use f-Strings to print strings and variables.

    =   ASSIGNMENT-1:
        Write a program to print the following figure:
                           a
                          aba
                         abcba
                        abcdcba
                       abcdedcba
                      abcdefedcba
                     abcdefgfedcba
                    abcdefghgfedcba
                   abcdefghihgfedcba
                  abcdefghijihgfedcba

    =   ASSIGNMENT-2:
        Count and report the number of occurrences of each character in a given string?

            Hello World    Students Allowed       Holocaust
               D = 1           A - 1                A - 1
               E - 1           D - 2                C - 1
               H - 1           E - 2                H - 1
               L - 3           L - 1                L - 1
               O - 2           N - 1                O - 2
               R - 1           O - 1                S - 1
               W - 1           S - 2                T - 1
                               T - 2                U - 1
                               U - 1
                               W - 1


+--------------------+
| Monday, 09-09-2024 |  Day-05
+--------------------+
    =   Assign Values to Multiple Variables
        1.  x = y = z = "Orange"
        2.  x, y, z = "Orange", "Banana", "Cherry"
        3.  fruits = ["apple", "banana", "cherry"]
            x, y, z = fruits

    =   Python print() Function Syntax
        Syntax : print(value(s), sep= ‘ ’, end = ‘\n’, file=file, flush=flush)

        Parameters:
            value(s): Any value, and as many as you like. Will be converted to a string
                      before printed
            sep=’separator’: (Optional) Specify how to separate the objects, if there is
                      more than one.Default :’ ‘
            end=’end’: (Optional) Specify what to print at the end.Default : ‘\n’
            file:      (Optional) An object with a write method.
                       Default: sys.stdout
            flush:     (Optional) A Boolean, specifying if the output is flushed (True)
                       or buffered (False).
                       Default: False

        Return Type: It returns output to the screen.

        a,b,=10,1000
        print('The value of a is {} and b is {}'.format(a,b))

    =   To explore the content of a module in Python, use dir()
        Example:
            >>> import sys
            >>> dir(sys)

    =   Introduction
            Lists is an ordered collection of items
            Lists are the simplest data structures in python
            Lists are Mutable (or) changable
            Each element or value that is inside a List is called an item

        >   List is accessible by providing the index of the position
        >   It allows negative indexing
            >>> l = ["This", "is", "no", 1, "among", 500, "soilders"]
            >>> print(l[0], l[3])
            This 1
            >>> print(l[-7], l[-4])
            This 1

        >   Slicing is allowed with list
            >>> print( l[2:5] )
            ['no', 1, 'among']
            >>> print( l[1:6:2] )
            ['is', 1, 500]
            >>> print( l[:] )
            ['This', 'is', 'no', 1, 'among', 500, 'soilders']

        >   append is used to add items to the end of the list
            >>> l
            ['This', 'is', 'no', 1, 'among', 500, 'soilders']
            >>> l.append("in")
            >>> l
            ['This', 'is', 'no', 1, 'among', 500, 'soilders', 'in']
            >>> l.append("India")
            >>> l
            ['This', 'is', 'no', 1, 'among', 500, 'soilders', 'in', 'India']
            >>>

        >   extend is used to add another list unto the existing list
            >>> l
            ['This', 'is', 'no', 1, 'among', 500, 'soilders', 'in', 'India']
            >>> s = ["another", "list", "extended"]
            >>> l.extend(s)
            >>> l
            ['This', 'is', 'no', 1, 'among', 500, 'soilders', 'in', 'India', 'another', 'list', 'extended']
            >>>

        >   insert adds item in between
            >>> l = ['This', 'is', 'no', 1, 'among', 500, 'soilders']
            >>> l.insert(2,15)
            >>> l
            ['This', 'is', 15, 'no', 1, 'among', 500, 'soilders']
            >>>

        >   pop deletes items from the list
            >>> x = l.pop(5)
            >>> x
            'among'
            >>> l
            ['This', 'is', 15, 'no', 1, 500, 'soilders']
            >>>

        >   clear removes all items from the list
            >>> l.clear()
            >>> l
            []
            >>>

        >   del completely remove the variable
            >>> del(l)
            >>> l
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
            NameError: name 'l' is not defined

        >   sort method sorts the content of the list in assending order
            >>> l = [4, 7, 2, 4, 1, 10, 34, 21, 11, 6, 0]
            >>> l.sort()
            >>> l
            [0, 1, 2, 4, 4, 6, 7, 10, 11, 21, 34]
            >>>

            >>> l = ["X", "O", "A", "S", "T", "M", "G", "B", "Q"]
            >>> l.sort()
            >>> l
            ['A', 'B', 'G', 'M', 'O', 'Q', 'S', 'T', 'X']
            >>>

        >   reverse is used to reverse the sequence of data
            >>> l = ["X", "O", "A", "S", "T", "M", "G", "B", "Q"]
            >>> l.reverse()
            >>> l
            ['Q', 'B', 'G', 'M', 'T', 'S', 'A', 'O', 'X']
            >>>

+---------------------+
| Tuesday, 10-09-2024 |  Day-06
+---------------------+
    =   Flip/Invert/Toggle the case of all characters in a given String?
        Original:   Quick Brown Fox Jumps Over The Lazy Dog
        Invert:     qUICK bROWN fOX jUMPS oVER tHE lAZY dOG

    =   Working with list continue...
        >   decending order sorting
                l.sort(reverse=True)
            >>> list = [25,10,35,50,11,17,42,66,31,34]
            >>> list.sort(reverse=True)
            >>> list
            [66, 50, 42, 35, 34, 31, 25, 17, 11, 10]

        >   sorting by length
                l.sort(key=len)
            >>> l = ["trade","mountain","bee","shoes","a","beautiful","Boxer","apple","elephant"]
            >>> l.sort(key=len)
            >>> l
            ['a', 'bee', 'trade', 'shoes', 'Boxer', 'apple', 'mountain', 'elephant', 'beautiful']

    =   Using dictionary data
        Dictionary is an array with key:value pair
        Example:
            dic = {"company":"Microsoft","location":"USA","abbr":"MS","product":"Windows"}
            keys:values, ...
        >   The keys function displays the list of keys:
            >>> dic = {"company":"Microsoft","location":"USA","abbr":"MS","product":"Windows"}
            >>> print(dic.keys())
            dict_keys(['company', 'location', 'abbr', 'product'])

        >   The values function displays the list all values
            >>> print(dic.values())
            dict_values(['Microsoft', 'USA', 'MS', 'Windows'])

        >   The pop function delete a pair of key:value
            >>> dic
            {'company': 'Microsoft', 'location': 'USA', 'abbr': 'MS', 'product': 'Windows'}
            >>> dic.pop("abbr")
            pop returns the value. In the above case, pop returns 'MS'

        >   The clear function removes all key:value pair from the dictionary
            >>> dic
            {'company': 'Microsoft', 'location': 'USA', 'product': 'Windows'}
            >>> dic.clear()
            >>> dic
            {}

        >   The get function returns the value of the specified key
            >>> dic = {"company":"Microsoft","location":"USA","abbr":"MS","product":"Windows"}
            >>> dic.get("location")
            'USA'
            >>> dic.get("product")
            'Windows'

        >   The items function converts the key-value pair in tuples and return the
            list
            >>> dic.items()
            dict_items([('company', 'Microsoft'), ('location', 'USA'), ('abbr', 'MS'), ('product', 'Windows')])

    =   The if statement
        if is a conditional statement.
        if allows to check multiple conditions in different blocks.
        The syntax of the statement is if <condition>:... elif <condition>:... elif <condition>:... else:...
        age = 15
        if age>80:
            print("Retire age")
        elif age>=65:
            print("Old age")
        elif age>=18:
            print("Adult")
        else:
            print("Infant")

    =   Ternery operator
        In C,C++,Java
            (condition)?true:false
        In FoxPro
            iif(<condition>, true, false)
        Python
            True if <condition> else False
            Example:
            child = True if age<=15 else False

    =   The while...else loop
            The while loop evaluates the following block if the condition associated
            in while loop is true.

            while(age>15):
                line-1
                line-2
                line-3

            Every loop, i.e. the while loop and the for loop has two more clauses,
            break and continue.
            The break clause exists out of the loop
            The continue clause moves the execution point the the begining of loop

    =   The do...while loop
        The do...while loop doesn't exists in Python

    =   The for loop
            The for iterates across list, dictionary, set, tupes and string
            The for loop also iterates across range of numbers
            The for loop also iterates across the iter function

        A loop may be nested within another outer loop.
        Any number of inner loops may be nested.
        The order of execution is done in LIFO order.

        Example:
            Multiplication tables program.

    =   ASSIGNMENT-1:
        Explore the use of other functions in list
        dir(list)
        'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert',
        'pop', 'remove', 'reverse', 'sort'

    =   ASSIGNMENT-2:
        Explore the use of dictionary functions
        dir(dict)
        'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem',
        'setdefault', 'update', 'values'

+----------------------+
| Thursday, 12-09-2024 |  Day-07
+----------------------+
    =   CLASSWORK:
        Write a program to convert all digits in a number to words?
        Example: 12345 = One Two Three Four Five
                 03786 = Zero Three Seven Eight Six
                 72913 = Seven Two Nine One Three

    =   How to create a class?
        class Person:
            def __init__(self):
                print("New Person")

        p = Person()
        New Person

        class Shivaji(Person):
            def __init__(self):
                super().__init__()
                print("I am Shivaji")

        s = Shivaji()
        New Person
        I am Shivaji

    =   What is Set?
        A Set in Python programming is an unordered collection data type that is
        iterable, mutable and has no duplicate elements.
        >   Set Items
        >   Unordered
        >   Unchangeable
        >   Duplicates Not Allowed

        >   # Example of Python Sets
            var = {"Alpha", "Beta", "Gamma", "Delta", "Theta"}
            type(var)

            Output:
            set

        >   # typecasting list to set
            myset = set(["a", "b", "c"])
            print(myset)

            # Adding element to the set
            myset.add("d")
            print(myset)

            Output:
            {'c', 'b', 'a'}
            {'d', 'c', 'b', 'a'}

        >   # Check unique and  Immutable with Python Set
            # Python program to demonstrate that
            # a set cannot have duplicate values
            # and we cannot change its items

            # a set cannot have duplicate values
            myset = {"Good", "brings", "good"}
            print(myset)

            # values of a set cannot be changed
            myset[1] = "Hello"
            print(myset)

            Output:
            {'Good', 'brings', 'good'}
            TypeError: 'set' object does not support item assignment

        >   # Python example demonstrate that a set
            # can store heterogeneous elements
            myset = {"Gold", "for", 10, 52.7, True}

            Output:
            print(myset)
            {True, 'Gold', 52.7, 10, 'for'}

        >   True and 1 is considered the same value:
            thisset = {"apple", "banana", "cherry", True, 1, 2}
            print(thisset)

            Output:
            {'cherry', True, 2, 'banana', 'apple'}

        >   False and 0 is considered the same value:
            thisset = {"apple", "banana", "cherry", False, True, 0}
            print(thisset)

            Output:
            {False, True, 'cherry', 'banana', 'apple'}

        >   Set with string, int and boolean data-types
            set1 = {"apple", "banana", "cherry"}
            set2 = {1, 5, 7, 9, 3}
            set3 = {True, False, False}

            print(set1)
            print(set2)
            print(set3)

            Output:
            {'cherry', 'apple', 'banana'}
            {1, 3, 5, 7, 9}
            {False, True}

        >   Supported functions of set:
            'add', 'clear', 'copy', 'difference', 'difference_update', 'discard',
            'intersection', 'intersection_update', 'isdisjoint', 'issubset',
            'issuperset', 'pop', 'remove', 'symmetric_difference',
            'symmetric_difference_update', 'union', 'update'

        >   The add function
            set1 = {"apple", "banana", "cherry"}
            set1.add("pineapple")

            Output:
            {'cherry', 'pineapple', 'banana', 'apple'}

        >   The clear function
            set1 = {'cherry', 'pineapple', 'banana', 'apple'}
            set1.clear()
            print(set1)

            Output:
            set()

        >   The intersection function
            set1 = {'cherry', 'banana', 'apple'}
            set2 = {"grephs","pineapple","banana"}
            set1.intersection(set2)

            Output:
            print(set1)
            {'banana'}

            set1 = {'cherry', 'banana', 'apple'}
            set2 = {"grephs","pineapple","banana"}
            set2.intersection(set1)
            {'banana'}

            Output:
            set1
            {'cherry', 'banana', 'apple'}
            set2
            {'grephs', 'banana', 'pineapple'}


            set1 = {4,2,7,3,1}
            set2 = {6,5,4,3,2}
            set2.intersection(set1)
            {2, 3, 4}
            set1
            {1, 2, 3, 4, 7}
            set2
            {2, 3, 4, 5, 6}

        >   # Remove items that are not common to both A & B
            A = {'red', 'green', 'blue'}
            B = {'yellow', 'red', 'orange'}
            A.intersection_update(B)
            print(A)
            Output: {'red'}

            A = {'red', 'green', 'blue'}
            B = {'yellow', 'red', 'orange'}
            A &= B
            print(A)
            Output: {'red'}

        >   The intersection_update function
            set1 = {'cherry', 'banana', 'apple'}
            set2 = {"grephs","pineapple","banana"}
            set2.intersection_update(set1)
            set1
            {'cherry', 'banana', 'apple'}
            set2
            {'banana'}

            set1 = {4,2,7,3,1}
            set2 = {6,5,4,3,2}
            set2.intersection_update(set1)
            {2, 3, 4}
            set1
            {1, 2, 3, 4, 7}
            set2
            {2, 3, 4, 5, 6}

        >   The update function
            x = {"apple", "banana", "cherry"}
            y = {"google", "microsoft", "apple"}
            x.update(y)
            print(x)

            Output:
            {'cherry', 'microsoft', 'banana', 'google', 'apple'}

        >   Python Frozen Sets
            Frozen sets in Python are immutable objects that only support methods
            and operators that produce a result without affecting the frozen set or
            sets to which they are applied. It can be done with frozenset() method
            in Python.

            While elements of a set can be modified at any time, elements of the
            frozen set remain the same after creation.

            If no parameters are passed, it returns an empty frozenset.

    =   What is Tuple?
        Tuples are immutable list.

        >   Supported function of tuple:
            'count', 'index'

        >   The count function
            Count the number of occurances of a particular value in the tuple
            tup = (2,4,6,8,1,9,0,2,3,7)
            print(tup.count(2))
            2
            print(tup.count(5))
            0

        >   The index function
            Index finds the position of the value specified
            tup = (22, 3, 45, 4, 2.4, 2, 56, 890, 1)
            print(tup.index(45))
            2
            print(tup.index(890))
            7

    =   ASSIGNMENT:
        Complete the series by generating 10 numbers in the sequence:
        1)  1, 3, 5, 11, 21, ......      (n, n*2-1, n*2+1, n*2-1, n*2+1, ...
        2)  1, 3, 6, 10, 15, ......
        3) 22,21,23,22,24,23, .....

+--------------------+
| Friday, 13-09-2024 |  Day-08
+--------------------+
    =   How to install mysql?
        To install in Windows, run the file "mysql-5.5.35-winx64.msi".

    =   How to create a user in mysql?
        CREATE USER <username> IDENTIFIED BY <password>;

    =   How to grant privileges to a user?
        GRANT ALL PRIVILEGES ON *.* TO 'milan@localhost';

    =   HELP CREATE

        SHOW DATABASES;

        CREATE DATABASE trident;

        USE trident;

        mysql> CREATE TABLE student(
        -> id INT(6) NOT NULL AUTO_INCREMENT,
        -> name VARCHAR(30) NOT NULL,
        -> dob DATE,
        -> gender ENUM('F','M','O') NOT NULL,
        -> PRIMARY KEY(id)
        -> );

        SHOW TABLES;

        INSERT INTO student(name,dob,gender) VALUES
            ('Gopinath Ojha','2004-11-25','M'),
            ('Abinash Patra', '2003-01-21', 'M');

        mysql> SELECT * FROM student;
        +----+---------------+------------+--------+
        | id | name          | dob        | gender |
        +----+---------------+------------+--------+
        |  1 | Gopinath Ojha | 2004-11-25 | M      |
        |  2 | Abinash Patra | 2003-01-21 | M      |
        +----+---------------+------------+--------+

        UPDATE student SET name='Priyadarsini Mohapatra', dob='2004-02-21', gender='F' WHERE id=3;
        +----+------------------------+------------+--------+
        | id | name                   | dob        | gender |
        +----+------------------------+------------+--------+
        |  1 | Gopinath Ojha          | 2004-11-25 | M      |
        |  2 | Abinash Patra          | 2003-01-21 | M      |
        |  3 | Priyadarsini Mohapatra | 2004-02-21 | F      |
        +----+------------------------+------------+--------+

    =   ASSIGNMENT:
        Create 3-4 tables for each entity and insert minimum 10 rows in each table.

+--------------------+
| Monday, 16-09-2024 |  Day-09
+--------------------+
    =   The DICTIONARY data type
        Dictionaries are used to store data values in key:value pairs.
        A dictionary is a collection which is
        >   Ordered
            As of Python version 3.7, dictionaries are ordered.
            In Python 3.6 and earlier, dictionaries are unordered.
        >   Changeable
        >   do not allow duplicates

    =   dictdata = {"id":1,"name":"Mohan Majhi","age":70,"gender":"Male","post":"Chief Minister"}

        >   # Print all key name
            for x in dictdata:
                print(x)

        >   # Print all values
            for x in dictdata:
                print(dictdata[x])

        >   # Print values using values()
            for x in dictdata.values():
                print(x)

        >   # Print keys using keys()
            for x in dictdata.keys():
                print(x)

        >   # Loop through both keys and values
            for x, y in dictdata.items():
                print(x, y)

    =   Copy dictionary to another variable

        >   # copy of a dictionary with the copy() method
            dict2nd = dictdata.copy()
                print(dictdata)

        >   dict2nd = dict(dictdata)
                print(dict2nd)

    =   Create a nested dictionary
        dictdata = {
            "father":{"name":"Adam","age":1000,"gender":"Male"},
            "mother":{"name":"Eve","age":900,"gender":"Female"},
            "child": {"name":"Abel","age":600,"gender":"Male"}
            }

        myfamily = {
            "child1" : {"name":"Rupa",  "year":2004},
            "child2" : {"name":"Disha", "year":2007},
            "child3" : {"name":"Aaron", "year":2011}
        }

        father = {"name":"Adam","age":1000,"gender":"Male"}
        mother = {"name":"Eve","age":900,"gender":"Female"}
        child  = {"name":"Abel","age":600,"gender":"Male"}
        family = {"father":father, "mother":mother, "child":child}

    =   The above same dictionary created in another way:
        child1 = {"name":"Rupa",  "year":2004}
        child2 = {"name":"Disha", "year":2007}
        child3 = {"name":"Aaron", "year":2011}
        myfamily = {"child1":child1, "child2":child2, "child3":child3}

    =   Print the name of child 2:
        print(myfamily["child2"]["name"])

    =   Loop through a dictionary by using the items()
        for x, obj in myfamily.items():
            print(x)

            for y in obj:
                print(y + ':', obj[y])

        Output:
            father
            name : Adam
            age : 1000
            gender : Male
            mother
            name : Eve
            age : 900
            gender : Female
            child
            name : Abel
            age : 600
            gender : Male


    =   Dictionary functions/Methods
            Python has a set of built-in methods that you can use on dictionaries.
            Method  Description
            clear() Removes all the elements from the dictionary
            copy()  Returns a copy of the dictionary
            fromkeys()  Returns a dictionary with the specified keys and value
            get()   Returns the value of the specified key
            items() Returns a list containing a tuple for each key value pair
            keys()  Returns a list containing the dictionary's keys
            pop()   Removes the element with the specified key
            popitem()   Removes the last inserted key-value pair
            setdefault()    Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
            update()    Updates the dictionary with the specified key-value pairs
            values()    Returns a list of all the values in the dictionary

    =   Keyboard Input in Python
        Syntax
            input(prompt)

        The input data is always in string. Use the following functions to cast
        the string data into required data types:

        name = input("Name: ")                  Return string
        age = int(input("Age: "))               Return int
        salary = float(input("Salary: "))       Return float (numeric data with decimal point)

        The 2.7 version of Python and earlier had raw_input(prompt) function
        which behaved similar with today's input() function

    =   CLASS-ASSIGNMENT:
        What is your name?  xxxxxxxxxxxxxxxxxxx
        Your age:           #####
        Date of birth:      dd-mm-yyyy
        Gender [M/F]:       x
        Mobile No.:         ##########
        Email-id:           xxxxxxxxxxxxxxxxxxx


+---------------------+
| Tuesday, 17-09-2024 |   Class suspended due to PM's visit
+---------------------+

+-----------------------+
| Wednesday, 18-09-2024 |  Day-10
+-----------------------+
    =   What is exception handling?
        Exception handling is a fault resistant technique implemented in the programming
        languages. During runtime, if the program encounters any error, it branches
        its execution to a user defined path instead of abruptly termination the program
        and displaying complex and technical messages for the user.

    =   Any class that inherits the Exception class is treated an Error class.

    =   Exception Handling in Python
        For exception handling Python has provided the "try" statement.
        The try statement has another 3 clauses:
            try:...except:...except:...else:...finally:...

    =   The main program is written the try block. When an exception/error occurs
        within the block, an exception object is generated and the execution sequence
        is interrupted. The exception is matched with all the exception names associated
        with the except clause.

        If there is no error in the program, the try statement executes the else clause.

        In case finally clause is used in the try statement, it must be executed, if
        there is not error or there is error.


        >   Exception
            +- AirthmeticError
            |  +- ZeroDivisionError
            Example:
                divident = 1099
                divisor = 0

                try:
                    result = dividend / divisor
                    print("Result:", result)
                except ArithmeticError:
                    print("Error: Arithmetic error occurred!")

            In the above example, divisor remaining 0 in the division, will generate
            AirthmeticError.

        >   AssertionError
            Example:
                # Handling it manually
                try:
                    x = 1
                    y = 0
                    assert y != 0, "Invalid Operation"
                    print(x / y)

                # the errror_message provided by the user gets printed
                except AssertionError as msg:
                    print(msg)

        >   AttributeError
            Example:
                x = 10
                x.append(6)

            Output:
                Traceback (most recent call last):
                  File "/home/46576cfdd7cb1db75480a8653e2115cc.py", line 2, in
                    x.append(6)
                AttributeError: 'int' object has no attribute 'append'

            Example-2:
                string = "The famous website is { }".fst("wikipedia")
                print(string)
                    Traceback (most recent call last):
                      File "<stdin>", line 1, in <module>
                    AttributeError: 'str' object has no attribute 'fst'

        >   ModuleNotFoundError
            Example:
                import umymodule
                dir(umymodule)
                print('Exception')

        >   IndentationError
            Example:
                def check_number(a):
                if a > 2:
                if a < 7:
                return "Number is between 2 and 7"
                return "Number is greater than 2"
                return "Number is out of the range of 2 and 7"

                a = 5
                result = check_number(a)
                print(result)

            Output:
            Indentation error.

        >   IndexError
            name = 'Gurudas Singh'
            print(name[20])

        >   ZeroDivisionError
            numerator = 45
            denominator = 0
            quotient = numerator / denominator
            print(quotient)

        >   SyntaxError
            Example-1:
                assert = "Python Exceptions"

            Example-2:
                for s in string:
                    if (s != o:
                        print(s)

        >   NameError
            string = "Python Exceptions"
            for s in string:
                if (s != o):
                    print(s)

        >   ValueError
            s1 = int(input("Enter a number: "))
            Enter a number: 8OO
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
            ValueError: invalid literal for int() with base 10: '8OO'

    =   User defined error
        class MyError(Exception):
            def __init__(self):
                print("MyError Exception")

        raise MyError()

        Output:
        MyError Exception
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        MyError

    =   raise is only associated with errors class:
        class Process():
            def __init__(self):
                print("Process error")

        raise Process()

        Output:
        Process error
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: exceptions must derive from BaseException


+----------------------+
| Thursday, 19-09-2024 |    Day-11
+----------------------+
    =   Error handling
        CASE STUDY
        >   A certain country wants to issue voter-id card to its citizens who
            are eligible. The eligible criteria depends on the following points:
            1)  Individual must be greater then or equals to 18
            2)  Individual must be less then or equals to 90

        Error class hierarchy
        Exception
        +- ValueError
        |  +- AgeError
        |  |  +- BelowMinimumAgeError
        |  |  +- OverMaximumAgeError
        |  |  +- ZeroAgeError
        |  |  +- NegativeAgeError

        ages = [25,56,13,34,66,-34,71,21,0,45,91,89,-32,17,0]

    =   Python File Handling
        Reading and Writing on to a text file.

        Each line of a file is terminated with a special character, called the EOL
        or End of Line characters like comma {,} or newline character. It ends the
        current line and tells the interpreter a new one has begun.

    =   Advantages of File Handling in Python
        >   Versatility: File handling in Python allows you to perform a wide range
            of operations, such as creating, reading, writing, appending, renaming,
            and deleting files.
        >   Flexibility: File handling in Python is highly flexible, as it allows
            you to work with different file types (e.g. text files, binary files,
            CSV files , etc.), and to perform different operations on files (e.g.
            read, write, append, etc.).
        >   User–friendly: Python provides a user-friendly interface for file handling,
            making it easy to create, read, and manipulate files.
        >   Cross-platform: Python file-handling functions work across different platforms
            (e.g. Windows, Mac, Linux), allowing for seamless integration and compatibility.

    =   Disadvantages of File Handling in Python
        >   Error-prone: File handling operations in Python can be prone to errors,
            especially if the code is not carefully written or if there are issues
            with the file system (e.g. file permissions, file locks, etc.).
        >   Security risks: File handling in Python can also pose security risks,
            especially if the program accepts user input that can be used to access
            or modify sensitive files on the system.
        >   Complexity: File handling in Python can be complex, especially when working
            with more advanced file formats or operations. Careful attention must be
            paid to the code to ensure that files are handled properly and securely.
        >   Performance: File handling operations in Python can be slower than other
            programming languages, especially when dealing with large files or performing
            complex operations.

    =   October 9, 10 and 11 will remain holiday due to Dussara Puja

    =   File handling in Python is categorised into 4 operations:
        1)  Open
        2)  Read
        3)  Write
        4)  Close

    =   ASSIGNMENT:
        Write a login application in Python using error handling.

        Exception
        +- KeyError
        |  +- UsernameError
        +- ValueError
        |  +- PasswordError


+--------------------+
| Friday, 20-09-2024 |   Day-12
+--------------------+
    =   Modes required in the open file function:
        r:  open an existing file for a read operation.
        w:  open an existing file for a write operation. If the file already contains
            some data, then it will be overridden but if the file is not present then
            it creates the file as well.
        a:  open an existing file for append operation. It won’t override existing data.
        r+: To read and write data into the file. This mode does not override the
            existing data, but you can modify the data starting from the beginning
            of the file.
        w+: To write and read data. It overwrites the previous file if one exists,
            it will truncate the file to zero length or create a file if it does not
            exist.
        a+: To append and read data from the file. It won’t override existing data.

    =   The iter() function
        Python iter() method returns the iterator object, it is used to convert
        an iterable to the iterator.

        iter() Function in Python Syntax
        The iter() method in Python has the following syntax:

            Syntax : iter(obj, sentinel)
            Parameters :
                obj: Object which has to be converted to iterable
                     (usually an iterator).
                sentinel: value used to represent end of sequence.

            Returns : Iterator object

        Example:
            # Python3 code to demonstrate
            # working of iter()

            # initializing list
            lis1 = [1, 2, 3, 4, 5]

            # printing type
            print("The list is of type : " + str(type(lis1)))

            # converting list using iter()
            lis1 = iter(lis1)

            # printing type
            print("The iterator is of type : " + str(type(lis1)))

            # using next() to print iterator values
            print(next(lis1))
            print(next(lis1))
            print(next(lis1))
            print(next(lis1))
            print(next(lis1))

    =   CLASSWORK:
        Write a program to return the first character of every word in a phrase or name?
        def initial(name):
            ....
            ....
            return data

        print(initial("A P J Abdul Kalam"))
        APJAK

        Bijay Kumar Behera
        BKB

    =   ASSIGNMENT:
        Write a program to perform the basic calculator work i.e. divide, multiply,
        subtract and add operation with 2 numbers.

            Input 1st number: ######
            Input 2nd number: ######

            1. Addition
            2. Subtraction
            3. Multiplication
            4. Division

            Operation required [1-4]: #


+--------------------+
| Monday, 23-09-2024 |   Day-13
+--------------------+
    =   How is lambda function compared to normal function
        >   Normal function
            def double(x):
                return 2*x

        >   Lambda function
            double = lambda x: 2*x

    =   What is lambda function in Python?
        A lambda function is an small anonymous function (i.e., defined without a
        name) that can take any number of arguments but, unlike normal functions,
        evaluates and returns only one expression. A lambda function in Python has
        the following syntax:

            lambda arguments: expression
            (The expression is executed and the result is returned)

        Example-1:
            x = lambda a : a + 10
            print(x(5))

            Output:
                15

        Example-2:
            # Multiply argument a with argument b and return the result:
            x = lambda a, b : a * b
            print(x(5, 6))

            Output:
                30

        Example-3:
            x = lambda a, b, c : a + b + c
            print(x(5, 6, 2))

            Output:
                13

        Example-4:
        >   (lambda x, y, z: x + y + z)(3, 8, 1)                            # 12
        >   print((lambda x: x if(x > 10) else 10)(5))                      # 10
        >   print((lambda x: x if(x > 10) else 10)(12))                     # 12
        >   (lambda x: x * 10 if x > 10 else (x * 5 if x < 5 else x))(11)   # 110
        >   lst = [33, 3, 22, 2, 11, 1]
            filter(lambda x: x > 10, lst)                                   # <filter object at 0x000001AAB55BBA60>
        >   lst = [33, 3, 22, 2, 11, 1]
            sorted(filter(lambda x: x > 10, lst))                           # [11, 22, 33]
        >   lst = [33, 3, 22, 2, 11, 1]
            tpl = tuple(filter(lambda x: x > 10, lst))                      # (33, 22, 11)
        >   lst = [1, 2, 3, 4, 5]
            print(map(lambda x: x * 10, lst))                               # <map object at 0x000001AAB55BBA60>
            tpl = tuple(map(lambda x: x * 10, lst))                         # (10, 20, 30, 40, 50)

    =   Why Use Lambda Functions?
        The power of lambda is better shown when you use them as an anonymous
        function inside another function.

        Say you have a function definition that takes one argument, and that
        argument will be multiplied with an unknown number:

        Example:
            def myfunc(n):
              return lambda a : a * n

            mydoubler = myfunc(2)
            print(mydoubler(11))

            Output:
                22

    =   Using lambda for reading file
            try:
                with open('file.txt', 'r') as fp:
                    for each in iter(lambda: fp.read(1), ''):
                        print(each,end=' ')
                        sleep()
                    fp.close()

            except Exception as e:
                print('Some error',e.__class__.__name__)

    =   ASSIGNMENT
        Write a program to print every column data and then linefeed from the
        file data.csv.

    =   Creating a module
        How to create a user defined module?


+---------------------+
| Tuesday, 24-09-2024 |   Day-14
+---------------------+
    =   Find all perfect number between 2 given numbers?
        (A PERFECT number is that number which is equal to the sum of all numbers divisible to it)

        Example:   6 and 10000
                       6 = 1+2+3
                      28 = 1+2+4+7+14
                     496 = 1+2+4+8+16+31+62+124+248
                    8128 = 1+2+4+8+16+32+64+127+254+508+1016+2032+4064

    =   GROUP-1
            AI ENABLED DOCTOR'S APPOINTMENT
            1.  Priyadarshini Mohapatra
            2.  Bijay Kumar Behera (Lead)
            3.  Srikant Behera

    =   GROUP-2
            LEARNING APP FOR DEAF AND MUTE
            1.  Gopinath Ojha (Lead)
            2.  Harapriya Panda
            3.  Dibyaranjan Sethi

    =   GROUP-3
            ONLINE TESTING & MONITORING OF MEDICINES AND CONSUMABLES
            VALUE-COMPARISION E-COMMERCE PROJECT
            1.  Abinash Patra (Lead)
            2.  Ipsita Nayak
            3.  Supriya Singh


+-----------------------+
| Wednesday, 25-09-2024 |   Day-15
+-----------------------+
    STEPS INVOLVED TO CONNECT PYTHON WITH MYSQL
    =   Step-1: install the module mysql-connector-python
        >>  pip install mysql-connector-python
        >   pip install mysql-connector
        >   pip install mysql-connector-python-rf

    =   Step-2: Create database in the mysql server and create few tables under
        the same database.
        >   CREATE DATABASE IF NOT EXISTS contact_db;
        >   USE contact_db;
        >   CREATE TABLE

    =   Pip is a package manager for Python that allows you to install additional
        libraries and packages that are not part of the standard Python library
        such as the ones found in the Python Package Index. It is a replacement
        for an easy install. If your version of Python is 2.7.9 (or greater) or
        Python 3.4 (or greater), then PIP comes pre-installed with Python, in other
        cases, you will have to install it separately.


+----------------------+
| Thursday, 26-09-2024 |
+----------------------+
    =   Class suspended due to excessive rain


+--------------------+
| Friday, 27-09-2024 |
+--------------------+
    =   Class suspended due students college examination


+----------------------+
| Saturday, 28-09-2024 |   Day-16
+----------------------+
    =   How to work with MySQL database
        STEPS INVOLVED
        1.  Download mysql-connect-python (once)
        2.  import mysql-connect
        3.  Create Connection object
        4.  Create Cursor object
        5.  Manipulate the cursor

    =   Write a program to align columns in the following SQL statement:
        SELECT c.con_id AS 'ID', c.name AS 'CONTACT-NAME', c.gender AS 'SEX',
               c.mobile_no1 AS 'MOBILE', r.rel_name AS 'RELATION',
               l.loc_name AS 'LOCATION' 
        FROM contact AS c
        LEFT JOIN relation AS r ON c.rel_id=r.rel_id
        LEFT JOIN location AS l ON c.loc_id=l.loc_id;

    =   ASSIGNMENT:
        Write a program to automatically adjust the width of the column from the
        data entered into the column.


+--------------------+
| Monday, 30-09-2024 |   Day-17
+--------------------+
    =   ASSIGNMENT
        Write a program to INSERT data into SQLITE3 database and retrieve the data
        and display.

    =   TKinter
        Tkinter is a Graphical User Interface development library in Python. The
        library has to be separately installed using PIP.
            pip install tk

    =   To work with images in tkinter, install Pillow library:
            pip install Pillow

    =   CLASS-ASSIGNMENT:
        Write a program to add a new Label widget to the tk_gui2.py file.


+---------------------+
| Tuesday, 01-10-2024 |   Day-18
+---------------------+
    =   Widgets library
        >   Label
        >   Entry
        >   Button

    =   The grid function of all widget

    =   ASSIGNMENT:
        Write a program to create an user interface to capture data related to 
        a student. On clicking the "Save" button below the interface, it will
        save in people.csv file.


+-----------------------+
| Wednesday, 02-10-2024 |
+-----------------------+
    =   Holiday for Gandhi Jayanti


+----------------------+
| Thursday, 03-10-2024 |   Day-19
+----------------------+
    =   Basic Widgets in Tkinter
        >   Label:       Display static text or images.
        >   Button:      Create clickable buttons to trigger actions.
        >   Entry:       Allow user input for single-line text.
        >   Frame:       Organize widgets within a container.
        >   Checkbutton: Create checkboxes for boolean options.
        >   Radiobutton: Create radio buttons for mutually exclusive options.
        >   Listbox:     Display a list of items for selection.
        >   Scrollbar:   Add scrollbars to widgets like Listbox.
        >   Menu:        Create simple menus for application navigation.
        >   Canvas:      Draw shapes, lines, text, and images.

    =   Intermediate Widgets in Tkinter
        >   Combobox:    Provide a dropdown list with editable text entry.
        >   Scale:       Create a scale widget for selecting values within a range.
        >   Toplevel:    Create additional windows/dialogs.
        >   Message:     Display simple messages or notifications.
        >   Menubutton:  Create a button that opens a menu.
        >   Progressbar: Show progress of a task.
        >   Spinbox:     Provide a numerical input with up/down arrows.

    =   Advanced Widgets in Tkinter
        >   ScrolledText Widget: Create a text widget with built-in scrollbars.
        >   Treeview:    Display hierarchical data in a tree-like structure.
        >   MessageBox Widget: Display dialog boxes for messages, warnings, etc.
        >   Treeview scrollbar Widget: Add scrollbars to Treeview widgets.
        >   Text:        Create a multiline text input with advanced editing capabilities.


    =   ASSIGNMENT-CLASSWORK:
        Write a program to make a functional calculator:

            +-----------------------+
            |                       |
            |-----------------------|
            |   7   |   8   |   9   |
            |-------+-------+-------|
            |   4   |   5   |   6   |
            |-------+-------+-------|
            |   1   |   2   |   3   |
            |-------+---------------|
            |   0   |       +       |
            |-------+---------------|
            |   C   |       =       |
            +-----------------------+

    =   ASSIGNMENT:
        Debug tk_gui6.py and make it functional.


+--------------------+
| Friday, 04-10-2024 |
+--------------------+
    =   Class cancelled due to screening at college

+----------------------+
| Saturday, 05-10-2024 |   Day-20
+----------------------+
    =   MessageBox
        >   messagebox.showinfo(title-text, body-text)
        >   messagebox.showwarning(title-text, body-text)
        >   messagebox.showerror(title-text, body-text)
        >   messagebox.askquestion(title-text, body-text)
        >   messagebox.askokcancel(title-text, body-text)
        >   messagebox.askyesno(title-text, body-text)

    =   CLASS-ASSIGNMENT:
        Write a program to display the following screen operational:

        dropdown-relation
        entry-name of the person

        button-submit
        Father's name is S K Mohanty

    =   Next class after Puja on Monday, 14-10-2024


+--------------------+
| Friday, 18-10-2024 |   Day-21
+--------------------+
    =   Classes resume after Durga Puja holidays

    =   Write a HTML script to create the following form:
            +-------------------------------------------------------+
            |                                                       |
            |                 STUDENT INFO SYSTEM                   |
            |                                                       |
            |                                                       |
            |               ID No.: ________                        |
            |      Candidates name: ________________________        |
            |        Father's name: ________________________        |
            |               Gender: x Male    x Female              |
            |        Date of Birth: ##-##-####                      |
            |       Highest Qualif: !!!!!!!!!!!!!!!!!               |
            |             Location: !!!!!!!!!!!!!!!!!               |
            |                                                       |
            |                                                       |
            |                 +------+     +------+                 |
            |                 | SAVE |     | EXIT |                 |
            |                 +------+     +------+                 |
            |                                                       |
            +-------------------------------------------------------+

    =   Write a HTML script to create a report with the following header:
        +-------+-------------------------+-----------------------------------------------------------------------------------------------------------+
        |       |                         |                                           POPULATION                                                      |
        |       |                         |-----------------------------------------------------+-----------------------------------------------------|
        |       |                         |                           URBAN                     |                           RURAL                     |
        |       |                         |--------------------------+--------------------------+--------------------------+--------------------------|
        |       |                         |           MALE           |           FEMALE         |          MALE            |           FEMALE         |
        |       |                         |-----+------+-------+-----+-----+------+-------+-----+-----+------+-------+-----+-----+------+-------+-----|
        |  SLNO | NAME OF THE DISTRICT    | <5  | 6-15 | 16-25 | >25 | <5  | 6-15 | 16-25 | >25 | <5  | 6-15 | 16-25 | >25 | <5  | 6-15 | 16-25 | >25 |
        |-------+-------------------------+-----+------+-------+-----+-----+------+-------+-----+-----+------+-------+-----+-----+------+-------+-----|
        |   1   | BHUBANESWAR             | 12  |  15  |  41   |  33 |  11 |  14  |  38   |  32 | 12  |  15  |  41   |  33 |  11 |  14  |  38   |  32 |
        |   2   | CUTTACK                 | 10  |  11  |  36   |  21 |  13 |   6  |  20   |  28 | 10  |  11  |  36   |  21 |  13 |   6  |  20   |  28 |
        |       |                         |     |      |       |     |     |      |       |     |     |      |       |     |     |      |       |     |
        |       |                         |     |      |       |     |     |      |       |     |     |      |       |     |     |      |       |     |
        |       |                         |     |      |       |     |     |      |       |     |     |      |       |     |     |      |       |     |
        |       |                         |     |      |       |     |     |      |       |     |     |      |       |     |     |      |       |     |
        |       |                         |     |      |       |     |     |      |       |     |     |      |       |     |     |      |       |     |

    =   Write a HTML script to link all figures with different of figures.jpg to different
        pages:


+--------------------+
| Monday, 21-10-2024 |   Day-22
+--------------------+
    =   PROJECT
    =   GROUP-1
            AI ENABLED DOCTOR'S APPOINTMENT
            1.  Priyadarshini Mohapatra
            2.  Bijay Kumar Behera (Lead)
            3.  Srikant Behera

    =   GROUP-2
            PAYING GUEST & HOUSE RENTAL WEBSITE
            1.  Gopinath Ojha (Lead)
            2.  Harapriya Panda
            3.  Dibyaranjan Sethi

    =   GROUP-3
            ONLINE TESTING & MONITORING OF MEDICINES AND CONSUMABLES
            1.  Abinash Patra (Lead)
            2.  Ipsita Nayak
            3.  Supriya Singh

    =   Submit the SYNOPSIS of the above projects by tomorrow, Tuesday, 22-10-2024

    =   What is CSS?
        CSS stands for Cascading Style Sheet.
        CSS are a set of properties:values to control and define the HTML elements'
        styling.
    =   The properties and the values are pre-defined reserve words.
    =   There are 3 types of CSS:
        >   Inline
            Those CSS which are provided in the STYLE attribute of the element
            is known as inline CSS.
        >   Internal
            Internal CSS are provided in the <STYLE>...</STYLE> element that is defined
            within the <head>...</head> element.
        >   External
            When the CSS definition is present in a separate file and the HTML links
            the css file, it is external css.
    =   CSS properties are in pair of property-name:value; terminated by a semi-colon.
    =   Their may be multiple pair of properties.
    =   The inline css has to be provided in every element, where as the internal css
        are defined once against each element.
    
    =   What is Bootstrap?
        Bootstrap is a framework of CSS and Javascript classes.
        There are more than 300 css classes provided in Bootstrap.
        Just link the .css file of Bootstrap and use the classes provided.

    =   Checkout for the CSS link in the following link:
        https://getbootstrap.com/docs/4.4/getting-started/introduction/


+---------------------+
| Tuesday, 22-10-2024 |   Day-23
+---------------------+
    =   JavaScript
        This language was created by Netscape Communicator.

    =   Write a program to take the name and say hello in the same page
    =   Write a program to print a pyramid of astericks
    =   Write a program to print all Prime numbers between 2 given numbers
    =   Write a program to count the number of occurances of each alphabetic character
        in a line of text

    =   ASSIGNMENT
        Write a program to print the multiplication tables between 2 given numbers.


+-----------------------+
| Wednesday, 23-10-2024 |
+-----------------------+
    =   Class suspended due to rain and cyclone Dana

+----------------------+
| Thursday, 24-10-2024 |
+----------------------+
    =   Class suspended due to rain and cyclone Dana

+--------------------+
| Friday, 25-10-2024 |
+--------------------+
    =   Class suspended due to rain and cyclone Dana

+--------------------+
| Monday, 28-10-2024 |
+--------------------+
    =   Faculty on leave

+---------------------+
| Tuesday, 29-10-2024 |
+---------------------+
    =   Class cancelled due to college examination

+-----------------------+
| Wednesday, 30-10-2024 |   Day-24
+-----------------------+
    =   Browser	                    Name of Javascript Engine
        Google Chrome	            V8
        Edge (Internet Explorer)	Chakra
        Mozilla Firefox	            Spider Monkey
        Safari 	                    Javascript Core Webkit

    =   Write a program to count the number of alphabetic occurances in a text
    =   Write a program to reverse the text
    =   Write a program to print the multipication tables between two given numbers

    =   ASSIGNMENT
        Write a program to print all prime numbers between 2 given numbers


+----------------------+
| Thursday, 31-10-2024 |
+----------------------+
    =   Diwali


+--------------------+
| Friday, 01-11-2024 |
+--------------------+
    =   Diwali


+--------------------+
| Monday, 04-11-2024 |   Day-25
+--------------------+
    =   Write a program to display all color names in a list. On selecting any color name
        the color of the entire screen turns to that color.

    =   Write a program to validate the data in a form before it is submitted.

    =   Upload the Synopsis of your project in the required location in github.


+---------------------+
| Tuesday, 05-11-2024 |   Day-26
+---------------------+
    =   Form validation using Javascript
    =   150 solved questions
    =   Cursor, Clock, Sample programs


+-----------------------+
| Wednesday, 06-11-2024 |   Day-27
+-----------------------+
    =   Please find the script below for the Home task... 
        Apana mane taku recording Kari sunibe..

        ନମସ୍କାର ଆଜି, ମୁଁ ଆପଣଙ୍କୁ ଏକ ଯାତ୍ରାରେ ନେବାକୁ ଚାହୁଁଛି- ଆତ୍ମ-ଆବିଷ୍କାରର ଏକ ଯାତ୍ରା। କିନ୍ତୁ ଏହି ଯାତ୍ରା ପାଇଁ ମାନଚିତ୍ର କିମ୍ବା କମ୍ପାସ୍ ର
        ଆବଶ୍ୟକତା ନାହିଁ । ଏହା ପରିବର୍ତ୍ତେ, ଏହା ଏକ ଜିନିଷରୁ ଆରମ୍ଭ ହୁଏ ଯାହାକୁ ଆମେ ପ୍ରାୟତଃ ଅଣଦେଖା କରିଥାଉ: ଆମର ନିଜ ସ୍ୱର।ତୁମେ
        କେବେ ନିଜ ସ୍ୱରର ଶବ୍ଦ ଶୁଣିବା ବନ୍ଦ କରିଛନ୍ତି କି? କେବଳ ତୁମେ କହୁଥିବା ଶବ୍ଦ ନୁହେଁ, ସ୍ୱର, ପିଚ୍, ତାଳ- ଅନନ୍ୟ ମେଲୋଡି ଯାହା 
        କେବଳ ତୁମର ଏବଂ ତୁମର । ଯେତେବେଳେ ଆମେ ନିଜ ସ୍ୱର ଶୁଣିଥାଉ, ଆମେ ଆତ୍ମସଚେତନତାର ଦ୍ୱାର ଖୋଲିଥାଉ । ଆମେ ଦୁନିଆ ସହିତ
        କିପରି ଯୋଗାଯୋଗ କରୁ, ଆମର ଚିନ୍ତାଧାରା ଏବଂ ଭାବନାକୁ କିପରି ପ୍ରକାଶ କରୁ ଏବଂ ଅନ୍ୟମାନେ ଆମକୁ କିପରି ଅନୁଭବ କରନ୍ତି ତାହା ବୁଝିବା
        ଆରମ୍ଭ କରିଥାଉ | କିନ୍ତୁ ନିଜ ସ୍ୱର ଶୁଣିବା ଅସହଜ ହୋଇପାରେ । ଶବ୍ଦକୁ ଦେଖି ଆମେ ଆଶ୍ଚର୍ଯ୍ୟ ହୋଇଥାଉ, ଶବ୍ଦ ଉପରେ ଏହା ଯେମିତି 
        ଝୁଲୁଛି କିମ୍ବା ଠେଲି ଦେଉଛି। ଆମେ ସନ୍ଦେହ କିମ୍ବା ଅନିରାପତ୍ତାର ପ୍ରତିଫଳନ ଶୁଣିପାରୁ, ଯାହା ଆମେ ପୂର୍ବରୁ କେବେ ଦେଖିନଥିଲୁ ।ତଥାପି, 
        ସେହି ଅସୁବିଧା ଭିତରେ ସୁଯୋଗ ରହିଛି। କାରଣ ଆମର ଦୁର୍ବଳତାକୁ ସାମ୍ନା କରିବା ଦ୍ୱାରା ହିଁ ଆମେ ଆଗକୁ ବଢିପାରିବା । ଆମର ଅପୂର୍ଣ୍ଣତାକୁ 
        ଗ୍ରହଣ କରିବା ଦ୍ୱାରା ହିଁ ଆମେ ପ୍ରକୃତରେ ଆମର ସ୍ୱର ପାଇପାରିବା |ତେଣୁ, ମୁଁ ଆପଣଙ୍କୁ ଚ୍ୟାଲେଞ୍ଜ କରୁଛି: ଶୁଣିବାକୁ କିଛି ସମୟ ନିଅନ୍ତୁ।
        ଆବଶ୍ୟକ ପଡ଼ିଲେ ଆଖି ବନ୍ଦ କରନ୍ତୁ ଏବଂ କେବଳ ଶୁଣନ୍ତୁ। ଆପଣ କହୁଥିବା ଶବ୍ଦ, କହୁଥିବା କାହାଣୀ, ହସ ଏବଂ ଲୁହ ଶୁଣନ୍ତୁ । ଶବ୍ଦ ମଧ୍ୟରେ
        ନିରବତା ଶୁଣନ୍ତୁ, ଯେଉଁ ସ୍ଥାନରେ ସତ୍ୟ ବାସ କରେ ।

        ଏବଂ ତୁମେ ଶୁଣୁଥିବା ବେଳେ ନିଜକୁ ପଚାର: ମୁଁ କ'ଣ ଶୁଣିବି? ମୁଁ କିଏ, ମୁଁ କ'ଣ ବିଶ୍ୱାସ କରେ ଏବଂ ମୁଁ କେଉଁଆଡେ ଯାଉଛି ସେ ବିଷୟରେ
        ମୋ ସ୍ୱର କ'ଣ ପ୍ରକାଶ କରେ?ଶେଷରେ ଆମ ସ୍ୱର କେବଳ ବାୟୁରେ କମ୍ପନ ହେଉଥିବା ଶବ୍ଦ ତରଙ୍ଗ ଠାରୁ ଅଧିକ । ଏହା ହେଉଛି ଆମର 
        ଆଭ୍ୟନ୍ତରୀଣ ଆତ୍ମାର ପ୍ରତିଫଳନ - ଏକ ଦର୍ପଣ ଯାହା ଆମକୁ ଦେଖାଏ ଯେ ଆମେ କିଏ ଏବଂ ଆମେ କିଏ ହୋଇପାରିବା |

        ତେବେ ଆସନ୍ତୁ ନିଜ ସ୍ୱରର ଶକ୍ତିକୁ ଗ୍ରହଣ କରିବା । ଆସନ୍ତୁ ଶୁଣିବା, ପ୍ରକୃତରେ ଶୁଣିବା ଏବଂ ଆତ୍ମ-ଆବିଷ୍କାରର ଯାତ୍ରା ଆରମ୍ଭ କରିବା ।


+----------------------+
| Thursday, 07-11-2024 |   Day-28
+----------------------+
    =   What is DOM?
        DOM stands for Document Object Model.
        DOM is a programming interface that represents the structure of an HTML
        document in memory. It allows programmers to access, modify, and add 
        elements and content to an HTML document.

        <html>
            <head>
                <title>DOM Representation</title>
            </head>
            <body>
                <h1>Student Information</h1>
                <table>
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </table>
            </body>
        </html>

        DOM representation of the above HTML

                                html
                                  |
                +-----------------+----------------+
              head                               body
               |                                  |
               +- title                           +- h1
                                                  +- table
                                                  |  +- tr
                                                  |  |  +- td
                                                  |  |  +- td
                                                  |  |  +- td
                                                  |  +- tr
                                                  |  |  +- td
                                                  |  |  +- td
                                                  |  |  +- td

            document.getElementById("table").parent.parent;

    =   Write a program to display a table with rows and columns. In the bottom of the
        table, display a button. On clicking the button, the entire table reverse 
        horizontally and vertically.
        Reference: reverse_table.html


