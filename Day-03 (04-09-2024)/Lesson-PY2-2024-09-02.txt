Start Date: 02-09-2024
Time: Monday to Friday (3:30 pm-5:30 pm)
Course: PYTHON
Whatsapp group: 3rdSem MCA Trident(IIG Group)
GitHub-ID: https://github.com/milandas63/Trident-MCA-PY2-02-09-2024
Wifi Password: #A1B2C3E5D4#

Participants:
MILAN DAS                   7978168568  milandas63@gmail.com                milandas63
1.  Gopinath Ojha           7751847636  gopin5427@gmail.com                 Gopinathojha
2.  Abinash Patra           7848039329  patraabinash374@gmail.com           Abinash533
3.  Priyadarshini Mohapatra 8917460932  priyadarshinimohapatra328@gmail.com Priyadarshini-Mohapatra
4.  Harapriya Panda         6372322013  harapriya1813@gmail.com             Harapriya13181
5.  Ipsita Nayak            8144661279  ipsitanayak923@gmail.com            simpler-itgithub
6.  Bijay Kumar Behera      7205384824  bijaybehera594@gmail.com            BIJAY-BEHERA
7.  Srikant Behera          7978841760  kumarsrikant0788@gmail.com          srikant-07
8.  Dibyaranjan Sethi       9114168580  dibyaranjanip9@gmail.com            Dibya9114
9.  Jagan Lenka             9337849824  jaganlenka76@gmail.com

+--------------------+
| Monday, 02-09-2024 |  Day-01
+--------------------+
WHAT IS PYTHON?
Python is a widely-used, compiled and interpreted, garbage-collected,
high-level programming language and purely object-oriented programming
language that supports procedural, object-oriented, and functional
programming with dynamic semantics, used for general-purpose programming.
It’s everywhere, and people use numerous Python-powered devices on a daily
basis, whether they realize it or not.

----------------------------------------------------------------------------------

WHO DEVELOPED PYTHON?
The seed from which Python sprouted was created by Guido van Rossum,
and first released on February 20, 1991. While you may know the python
as a large snake, the name of the Python programming language comes
from an old BBC television comedy sketch series called Monty Python's
Flying Circus.

----------------------------------------------------------------------------------

FEATURES OF PYTHON:
1.  Easy to use and Read - Python's syntax is clear and easy to read,
    making it an ideal language for both beginners and experienced programmers.
    This simplicity can lead to faster development and reduce the chances of errors.
2.  Dynamically Typed - The data types of variables are determined during run-time.
    We do not need to specify the data type of a variable during writing codes.
3.  High-level - High-level language means human readable code.
4.  Compiled and Interpreted - Python code first gets compiled into bytecode,
    and then interpreted line by line. When we download the Python in our
    system form org we download the default implement of Python known as
    CPython. CPython is considered to be Complied and Interpreted both.
5.  Garbage Collected - Memory allocation and de-allocation are automatically
    managed. Programmers do not specifically need to manage the memory.
6.  Purely Object-Oriented - It refers to everything as an object, including
    numbers and strings.
7.  Cross-platform Compatibility - Python can be easily installed on Windows,
    macOS, and various Linux distributions, allowing developers to create
    software that runs across different operating systems.
8.  Rich Standard Library - Python comes with several standard libraries that
    provide ready-to-use modules and functions for various tasks, ranging
    from web development and data manipulation to machine learning and
    networking.
9.  Open Source - Python is an open-source, cost-free programming language.
    It is utilized in several sectors and disciplines as a result.

----------------------------------------------------------------------------------

HISTORY OF PYTHON
Python was created by Guido van Rossum. In the late 1980s, Guido van Rossum,
a Dutch programmer, began working on Python while at the Centrum Wiskunde &
Informatica (CWI) in the Netherlands. He wanted to create a successor to the
ABC programming language that would be easy to read and efficient.

In February 1991, the first public version of Python, version 0.9.0, was
released. This marked the official birth of Python as an open-source project.
The language was named after the British comedy series "Monty Python's
Flying Circus".

Python development has gone through several stages. In January 1994,
Python 1.0 was released as a usable and stable programming language.
This version included many of the features that are still present in
Python today.

From the 1990s to the 2000s, Python gained popularity for its simplicity,
readability, and versatility. In October 2000, Python 2.0 was released.
Python 2.0 introduced list comprehensions, garbage collection, and support
for Unicode.

In December 2008, Python 3.0 was released. Python 3.0 introduced several
backward-incompatible changes to improve code readability and maintainability.

Throughout 2010s, Python's popularity increased, particularly in fields like
data science, machine learning, and web development. Its rich ecosystem of
libraries and frameworks made it a favourite among developers.

The Python Software Foundation (PSF) was established in 2001 to promote,
protect, and advance the Python programming language and its community.

----------------------------------------------------------------------------------

WHY LEARN PYTHON?
Python provides many useful features to the programmer. These features make
it the most popular and widely used language. We have listed below
few-essential features of Python.

1.  Easy to use and Learn: Python has a simple and easy-to-understand syntax,
    unlike traditional languages like C, C++, Java, etc., making it easy for
    beginners to learn.
2.  Expressive Language: It allows programmers to express complex concepts in
    just a few lines of code or reduces Developer's Time.
3.  Interpreted Language: Python does not require compilation, allowing rapid
    development and testing. It uses Interpreter instead of Compiler.
4.  Object-Oriented Language: It supports object-oriented programming, making
    writing reusable and modular code easy.
5.  Open-Source Language: Python is open-source and free to use, distribute
    and modify.
6.  Extensible: Python can be extended with modules written in C, C++, or
    other languages.
7.  Learn Standard Library: Python's standard library contains many modules
    and functions that can be used for various tasks, such as string
    manipulation, web programming, and more.
8.  GUI Programming Support: Python provides several GUI frameworks, such as
    Tkinter and PyQt, allowing developers to create desktop applications easily.
9.  Integrated: Python can easily integrate with other languages and
    technologies, such as C/C++, Java, and . NET.
10. Embeddable: Python code can be embedded into other applications as a
    scripting language.
11. Dynamic Memory Allocation: Python automatically manages memory allocation,
    making it easier for developers to write complex programs without worrying
    about memory management.
12. Wide Range of Libraries and Frameworks: Python has a vast collection of
    libraries and frameworks, such as NumPy, Pandas, Django, and Flask, that
    can be used to solve a wide range of problems.
13. Versatility: Python is a universal language in various domains such as web
    development, machine learning, data analysis, scientific computing, and more.
14. Large Community: Python has a vast and active community of developers
    contributing to its development and offering support. This makes it easy
    for beginners to get help and learn from experienced developers.
15. Career Opportunities: Python is a highly popular language in the job market.
    Learning Python can open up several career opportunities in data science,
    artificial intelligence, web development, and more.
16. High Demand: With the growing demand for automation and digital
    transformation, the need for Python developers is rising. Many
    industries seek skilled Python developers to help build their digital
    infrastructure.
17. Increased Productivity: Python has a simple syntax and powerful libraries
    that can help developers write code faster and more efficiently. This can
    increase productivity and save time for developers and organizations.
18. Big Data and Machine Learning: Python has become the go-to language for
    big data and machine learning. Python has become popular among data
    scientists and machine learning engineers with libraries like NumPy,
    Pandas, Scikit-learn, TensorFlow, and more.

----------------------------------------------------------------------------------

PYTHON KEYWORDS
Python has a set of keywords that are reserved words that cannot be
used as variable names, function names, or any other identifiers:

KEYWORD     DESCRIPTION
 1. and         A logical operator
 2. as          To create an alias
 3. assert      For debugging
 4. break       To break out of a loop
 5. class       To define a class
 6. continue    To continue to the next iteration of a loop
 7. def         To define a function
 8. del         To delete an object
 9. elif        Used in conditional statements, same as else if
10. else        Used in conditional statements
11. except      Used with exceptions, what to do when an exception occurs
12. False       Boolean value, result of comparison operations
13. finally     Used with exceptions, a block of code that will be executed no matter if there is an exception or not
14. for         To create a for loop
15. from        To import specific parts of a module
16. global      To declare a global variable
17. if          To make a conditional statement
18. import      To import a module
19. in          To check if a value is present in a list, tuple, etc.
20. is          To test if two variables are equal
21. lambda      To create an anonymous function
22. None        Represents a null value
23. nonlocal    To declare a non-local variable
24. not         A logical operator
25. or          A logical operator
26. pass        A null statement, a statement that will do nothing
27. raise       To raise an exception
28. return      To exit a function and return a value
29. True        Boolean value, result of comparison operations
30. try         To make a try...except statement
31. while       To create a while loop
32. with        Used to simplify exception handling
33. yield       To return a list of values from a generator

----------------------------------------------------------------------------------

PYTHON GLOSSARY
This is a list of all the features explained in the Python Tutorial.

Indentation
    Indentation refers to the spaces at the beginning of a code line
Comments
    Comments are code lines that will not be executed
Multiline Comments
    How to insert comments on multiple lines
Creating Variables
    Variables are containers for storing data values
Variable Names
    How to name your variables
Assign Values to Multiple Variables
    How to assign values to multiple variables
Output Variables
    Use the print statement to output variables
String Concatenation
    How to combine strings
Global Variables
    Global variables are variables that belongs to the global scope
Built-In Data Types
    Python has a set of built-in data types
Getting Data Type
    How to get the data type of an object
Setting Data Type
    How to set the data type of an object
Numbers
    There are three numeric types in Python
Int
    The integer number type
Float
    The floating number type
Complex
    The complex number type
Type Conversion
    How to convert from one number type to another
Random Number
    How to create a random number
Specify a Variable
    Type    How to specify a certain data type for a variable
String Literals
    How to create string literals
Assigning a String to a Variable
    How to assign a string value to a variable
Multiline Strings
    How to create a multiline string
Strings are Arrays
    Strings in Python are arrays of bytes representing Unicode characters
Slicing a String
    How to slice a string
Negative Indexing on a String
    How to use negative indexing when accessing a string
String Length
    How to get the length of a string
Check In String
    How to check if a string contains a specified phrase
Format String
    How to combine two strings
Escape Characters
    How to use escape characters
Boolean Values
    True or False
Evaluate Booleans
    Evaluate a value or statement and return either True or False
Return Boolean Value
    Functions that return a Boolean value
Operators
    Use operator to perform operations in Python
Arithmetic Operators
    Arithmetic operator are used to perform common mathematical operations
Assignment Operators
    Assignment operators are use to assign values to variables
Comparison Operators
    Comparison operators are used to compare two values
Logical Operators
    Logical operators are used to combine conditional statements
Identity Operators
    Identity operators are used to see if two objects are in fact the same object
Membership Operators
    Membership operators are used to test is a sequence is present in an object
Bitwise Operators
    Bitwise operators are used to compare (binary) numbers
Lists
    A list is an ordered, and changeable, collection
Access List Items
    How to access items in a list
Change List Item
    How to change the value of a list item
Loop Through List Items
    How to loop through the items in a list
List Comprehension
    How use a list comprehensive
Check if List Item Exists
    How to check if a specified item is present in a list
List Length
    How to determine the length of a list
Add List Items
    How to add items to a list
Remove List Items
    How to remove list items
Copy a List
    How to copy a list
Join Two Lists
    How to join two lists
Tuple
    A tuple is an ordered, and unchangeable, collection
Access Tuple Items
    How to access items in a tuple
Change Tuple Item
    How to change the value of a tuple item
Loop List Items
    How to loop through the items in a tuple
Check if Tuple Item Exists
    How to check if a specified item is present in a tuple
Tuple Length
    How to determine the length of a tuple
Tuple With One Item
    How to create a tuple with only one item
Remove Tuple Items
    How to remove tuple items
Join Two Tuples
    How to join two tuples
Set
    A set is an unordered, and unchangeable, collection
Access Set Items
    How to access items in a set
Add Set Items
    How to add items to a set
Loop Set Items
    How to loop through the items in a set
Check if Set Item Exists
    How to check if a item exists
Set Length
    How to determine the length of a set
Remove Set Items
    How to remove set items
Join Two Sets
    How to join two sets
Dictionary
    A dictionary is an unordered, and changeable, collection
Access Dictionary Items
    How to access items in a dictionary
Change Dictionary Item
    How to change the value of a dictionary item
Loop Dictionary Items
    How to loop through the items in a tuple
Check if Dictionary Item Exists
    How to check if a specified item is present in a dictionary
Dictionary Length
    How to determine the length of a dictionary
Add Dictionary Item
    How to add an item to a dictionary
Remove Dictionary Items
    How to remove dictionary items
Copy
    Dictionary  How to copy a dictionary
Nested Dictionaries
    A dictionary within a dictionary
If Statement
    How to write an if statement
If Indentation
    If statements in Python relies on indentation (whitespace at the
    beginning of a line)
Elif
    elif is the same as "else if" in other programming languages
Else
    How to write an if...else statement
Shorthand If
    How to write an if statement in one line
Shorthand If Else
    How to write an if...else statement in one line
If AND
    Use the and keyword to combine if statements
If OR
    Use the or keyword to combine if statements
If NOT
    Use the not keyword to reverse the condition
Nested If
    How to write an if statement inside an if statement
The pass Keyword in If
    Use the pass keyword inside empty if statements
While
    How to write a while loop
While Break
    How to break a while loop
While Continue
    How to stop the current iteration and continue wit the next
While Else
    How to use an else statement in a while loop
For
    How to write a for loop
Loop Through a String
    How to loop through a string
For Break
    How to break a for loop
For Continue
    How to stop the current iteration and continue wit the next
Looping Through a range
    How to loop through a range of values
For Else
    How to use an else statement in a for loop
Nested Loops
    How to write a loop inside a loop
For pass
    Use the pass keyword inside empty for loops
Function
    How to create a function in Python
Call a Function
    How to call a function in Python
Function Arguments
    How to use arguments in a function
*args
    To deal with an unknown number of arguments in a function, use the
    * symbol before the parameter name
Keyword Arguments
    How to use keyword arguments in a function
**kwargs
    To deal with an unknown number of keyword arguments in a function,
    use the * symbol before the parameter name
Default Parameter Value
    How to use a default parameter value
Passing a List as an Argument
    How to pass a list as an argument
Function Return Value
    How to return a value from a function
The pass Statement in Functions
    Use the pass statement in empty functions
Function Recursion
    Functions that can call itself is called recursive functions
Lambda Function
    How to create anonymous functions in Python
Why Use Lambda Functions
    Learn when to use a lambda function or not
Array
    Lists can be used as Arrays
What is an Array
    Arrays are variables that can hold more than one value
Access Arrays
    How to access array items
Array Length
    How to get the length of an array
Looping Array Elements
    How to loop through array elements
Add Array Element
    How to add elements from an array
Remove Array Element
    How to remove elements from an array
Array Methods
    Python has a set of Array/Lists methods
Class
    A class is like an object constructor
Create Class
    How to create a class
The Class __init__() Function
    The __init__() function is executed when the class is initiated
Object Methods
    Methods in objects are functions that belongs to the object
self
    The self parameter refers to the current instance of the class
Modify Object Properties
    How to modify properties of an object
Delete Object Properties
    How to modify properties of an object
Delete Object
    How to delete an object
Class pass Statement
    Use the pass statement in empty classes
Create Parent Class
    How to create a parent class
Create Child Class
    How to create a child class
Create the __init__() Function
    How to create the __init__() function
super Function
    The super() function make the child class inherit the parent class
Add Class Properties
    How to add a property to a class
Add Class Methods
    How to add a method to a class
Iterators
    An iterator is an object that contains a countable number of values
Iterator vs Iterable
    What is the difference between an iterator and an iterable
Loop Through an Iterator
    How to loop through the elements of an iterator
Create an Iterator
    How to create an iterator
StopIteration
    How to stop an iterator
Global Scope
    When does a variable belong to the global scope?
Global Keyword
    The global keyword makes the variable global
Create a Module
    How to create a module
Variables in Modules
    How to use variables in a module
Renaming a Module
    How to rename a module
Built-in Modules
    How to import built-in modules
Using the dir() Function
    List all variable names and function names in a module
Import From Module
    How to import only parts from a module
Datetime Module
    How to work with dates in Python
Date Output
    How to output a date
Create a Date Object
    How to create a date object
The strftime Method
    How to format a date object into a readable string
Date Format Codes
    The datetime module has a set of legal format codes
JSON
    How to work with JSON in Python
Parse JSON
    How to parse JSON code in Python
Convert into JSON
    How to convert a Python object in to JSON
Format JSON
    How to format JSON output with indentations and line breaks
Sort JSON
    How to sort JSON
RegEx Module
    How to import the regex module
RegEx Functions
    The re module has a set of functions
Metacharacters in RegEx
    Metacharacters are characters with a special meaning
RegEx Special Sequences
    A backslash followed by a a character has a special meaning
RegEx Sets
    A set is a set of characters inside a pair of square brackets with a special meaning
RegEx Match Object
    The Match Object is an object containing information about the search and the result
Install PIP
    How to install PIP
PIP Packages
    How to download and install a package with PIP
PIP Remove Package
    How to remove a package with PIP
Error Handling
    How to handle errors in Python
Handle Many Exceptions
    How to handle more than one exception
Try Else
    How to use the else keyword in a try statement
Try Finally
    How to use the finally keyword in a try statement
raise
    How to raise an exception in Python

----------------------------------------------------------------------------------

PYTHON BUILT-IN EXCEPTIONS
The table below shows built-in exceptions that are usually raised in Python:

EXCEPTION           DESCRIPTION
ArithmeticError     Raised when an error occurs in numeric calculations
AssertionError      Raised when an assert statement fails
AttributeError      Raised when attribute reference or assignment fails
Exception           Base class for all exceptions
EOFError            Raised when the input() method hits an "end of file" condition (EOF)
FloatingPointError  Raised when a floating point calculation fails
GeneratorExit       Raised when a generator is closed (with the close() method)
ImportError         Raised when an imported module does not exist
IndentationError    Raised when indentation is not correct
IndexError          Raised when an index of a sequence does not exist
KeyError            Raised when a key does not exist in a dictionary
KeyboardInterrupt   Raised when the user presses Ctrl+c, Ctrl+z or Delete
LookupError         Raised when errors raised cant be found
MemoryError         Raised when a program runs out of memory
NameError           Raised when a variable does not exist
NotImplementedError Raised when an abstract method requires an inherited class to override the method
OSError             Raised when a system related operation causes an error
OverflowError       Raised when the result of a numeric calculation is too large
ReferenceError      Raised when a weak reference object does not exist
RuntimeError        Raised when an error occurs that do not belong to any specific exceptions
StopIteration       Raised when the next() method of an iterator has no further values
SyntaxError         Raised when a syntax error occurs
TabError            Raised when indentation consists of tabs or spaces
SystemError         Raised when a system error occurs
SystemExit          Raised when the sys.exit() function is called
TypeError           Raised when two different types are combined
UnboundLocalError   Raised when a local variable is referenced before assignment
UnicodeError        Raised when a unicode problem occurs
UnicodeEncodeError  Raised when a unicode encoding problem occurs
UnicodeDecodeError  Raised when a unicode decoding problem occurs
UnicodeTranslateError   Raised when a unicode translation problem occurs
ValueError          Raised when there is a wrong value in a specified data type
ZeroDivisionError   Raised when the second operator in a division is zero

----------------------------------------------------------------------------------

+---------------------+
| Tuesday, 03-09-2024 |  Day-02
+---------------------+
    =   Comments
        The lines which are ignored by the compiler
        There are 2 types of comments in Python:
        1. # - for single line comment
        2. """
                multiline comment
           """
    =   Addition
    =   Subtraction
    =   Multiplication
    =   Division

    =   Variables
        Rules for creating a variable name:
        1. The variable name must start with alphabetic character or underscore character (_)
        2. A reserve word can't be a variable name
        3. Variable names are created with the help of alphabetic, digit and underscore characters

    =   Mulitiple values List
        >   Uses [] to create List
        >   Automatically resize
        >   Multiple data-types are allowed
    =   Dictionary
        >   Uses {} to create Set
        >   Created with a name:value pair
    =   Set
        >   Uses {} to create Set
        >   Doesn't allow repetition
        >   Order value automatically
    =   if-[elif]-[elif]-[else]
    =   True, False
    =   for
    =   while
    =   try...except
        What is an exception?
        An exception is a fault resistance technique implemented in programming.


D:\IIG\Intern-PY2-2024-09-02>py diamond.py
                                        *
                                       ***
                                      *****
                                     *******
                                    *********
                                   ***********
                                  *************
                                 ***************
                                *****************
                               *******************
                                *****************
                                 ***************
                                  *************
                                   ***********
                                    *********
                                     *******
                                      *****
                                       ***
                                        *

D:\IIG\Intern-PY2-2024-09-02>python
Python 3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>>
>>>
>>> # Ignore this line
>>> """
... Multiple lines may be
... written within the 3 double quotes
... and the lines will be ignored
... """
'\nMultiple lines may be\nwritten within the 3 double quotes\nand the lines will be ignored\n'
>>>
>>>
>>> 35+25
60
>>> 35 - 25
10
>>> 5 * 25
125
>>> 300 / 50
6.0
>>> 24progranas = 100
  File "<stdin>", line 1
    24progranas = 100
     ^
SyntaxError: invalid decimal literal
>>> _var = 100
>>> x = 150
>>> from = 25
  File "<stdin>", line 1
    from = 25
         ^
SyntaxError: invalid syntax
>>>
>>>
>>>
>>>
>>> lang = ["English","Odia","Hindi","Panjabi"]
>>> lang
['English', 'Odia', 'Hindi', 'Panjabi']
>>> lang[3]
'Panjabi'
>>> lang[1]
'Odia'
>>> lang[0]
'English'
>>> lang + [1234,4321,3421,2234,2231]
['English', 'Odia', 'Hindi', 'Panjabi', 1234, 4321, 3421, 2234, 2231]
>>>
>>>
>>> dic = { "president":"droupadi murmu", "pm":"narendra modi", "fm":"nirmal sitaraman" }
>>> dic["pm"]
'narendra modi'
>>> dic["fm"]
'nirmal sitaraman'
>>> dic["president"]
'droupadi murmu'
>>> dic["presi"]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'presi'
>>>
>>>
>>>
>>> dic = { "president":"droupadi murmu", "pm":"narendra modi", "fm":"nirmal sitaraman", 444:"Trident"
, True:"Jagan Sen" }
>>> dic[444]
'Trident'
>>> dic["444"]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: '444'
>>> dic[True]
'Jagan Sen'
>>> dic["droupadi murmu"]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'droupadi murmu'
>>>
>>>
>>>
>>>
>>> stype = {11, 11, 11, 44,44,44,44,44,77,77,77,22,22,22,2,22,22,22,5,55,55,55,55,55,33}
>>> stype
{33, 2, 5, 11, 44, 77, 22, 55}
>>> stype
{33, 2, 5, 11, 44, 77, 22, 55}
>>>
>>>
>>>
>>>
>>> if 1==2:
...     print("Never")
... else:
...     print("Equals")
...
Equals
>>> x = 10
>>> if x==1:
...     print("One")
... elif x==5:
...     print("Five")
... elif x==10:
...     print("Ten")
...
Ten
>>> True or False
True
>>> True and False
False
>>>
>>>
>>>
>>> for item in lang:
...     print(item)
...
English
Odia
Hindi
Panjabi
>>>
>>>
>>> for i in range(0,10):
...     print(i)
...
0
1
2
3
4
5
6
7
8
9
>>> for i in range(0, 101, 5):
...     print(i, end=" ")
...
0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 >>>
>>>
>>>
>>> for i in range(100, -1, -5):
...     print(i, end-", ")
...
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'end' is not defined
>>> for i in range(100, -1, -5):
...     print(i, end=", ")
...
100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0,
>>>
>>>
>>> x = 0
>>> try:
...     while x <= 4:
...             print(lang[x])
...             x = x - 1
... except IndexError:
...     print("No more data in list")
...
English
Panjabi
Hindi
Odia
English
No more data in list

    =   CLASSWORK:
        Write a program to print the following figure:
                          1
                         121
                        12321
                       1234321
                      123454321
                     12345654321
                    1234567654321
                   123456787654321
                  12345678987654321

    =   ASSIGNMENT-1:
        Write a program to print the following figure:
                         *
                        * *
                       *   *
                      *     *
                     *       *
                    *         *
                   *           *
                  *             *
                 *               *
                *******************

    =   ASSIGNMENT-2:
        Write a program to print the following figure:
                         1
                        212
                       32123
                      4321234
                     543212345
                    65432123456
                   7654321234567
                  876543212345678
                 98765432123456789


+-----------------------+
| Wednesday, 04-09-2024 |  Day-03
+-----------------------+

    =   What is Tuple?
        >   Tuples are used to store multiple items in a single variable.
        >   Tuple is one of 4 built-in data types in Python used to store collections
            of data, the other 3 are List, Set, and Dictionary, all with different
            qualities and usage.
        >   A tuple is a collection which is ordered and unchangeable.

    =   def

    =   Built-in Data Types
        Variables can store data of different types, and different types can do
        different things.

        Python has the following data types built-in by default, in these categories:

        Text Type:          str
        Numeric Types:      int, float, complex
        Sequence Types:     list, tuple, range
        Mapping Type:       dict
        Set Types:          set, frozenset
        Boolean Type:       bool
        Binary Types:       bytes, bytearray, memoryview
        None Type:          NoneType


    =   SETTING THE DATA TYPE
        Example                                         Data Type
        x = "Hello World"                               str
        x = 20                                          int
        x = 20.5                                        float
        x = 1j                                          complex
        x = ["apple", "banana", "cherry"]               list
        x = ("apple", "banana", "cherry")               tuple
        x = range(6)                                    range
        x = {"name" : "John", "age" : 36}               dict
        x = {"apple", "banana", "cherry"}               set
        x = frozenset({"apple", "banana", "cherry"})    frozenset
        x = True                                        bool
        x = b"Hello"                                    bytes
        x = bytearray(5)                                bytearray
        x = memoryview(bytes(5))                        memoryview
        x = None                                        NoneType


    =   SETTING THE SPECIFIC DATA TYPE
        Example                                         Data Type
        x = str("Hello World")                          str
        x = int(20)                                     int
        x = float(20.5)                                 float
        x = complex(1j)                                 complex
        x = list(("apple", "banana", "cherry"))         list
        x = tuple(("apple", "banana", "cherry"))        tuple
        x = range(6)                                    range
        x = dict(name="John", age=36)                   dict
        x = set(("apple", "banana", "cherry"))          set
        x = frozenset(("apple", "banana", "cherry"))    frozenset
        x = bool(5)                                     bool
        x = bytes(5)                                    bytes
        x = bytearray(5)                                bytearray
        x = memoryview(bytes(5))                        memoryview
